{
  "Name": "Dynamic Folder Export",
  "Objects": [
    {
      "Type": "DynamicFolder",
      "Name": "1Password (Python)",
      "Description": "This Dynamic Folder sample allows you to import dynamic credentials from 1Password.",
      "Notes": "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><title>\n\t\t</title>\n\t\t<style type=\"text/css\">\n\t\t\t.cs4F0CA83{text-align:left;text-indent:0pt;margin:0pt 0pt 0pt 0pt}\n\t\t\t.cs4480B777{color:#000000;background-color:transparent;font-family:Arial;font-size:16pt;font-weight:bold;font-style:normal;}\n\t\t\t.cs4A7471C4{text-align:left;text-indent:0pt;margin:12pt 0pt 12pt 0pt}\n\t\t\t.cs70680EAF{color:#000000;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:bold;font-style:normal;}\n\t\t\t.cs3FB5A5BA{color:#000000;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:normal;font-style:normal;}\n\t\t\t.csC76C7D68{color:#000000;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:normal;font-style:normal;text-decoration: none;}\n\t\t\t.csEEB8B155{color:#0000FF;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:normal;font-style:normal;text-decoration: underline;}\n\t\t\t.cs48D9DD3F{color:#000000;background-color:transparent;font-family:Arial;font-size:14pt;font-weight:bold;font-style:normal;}\n\t\t\t.csA0C0EFA3{text-align:left;margin:0pt 0pt 0pt 0pt;list-style-type:disc;color:#000000;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:normal;font-style:normal}\n\t\t\t.cs8A075B43{text-align:left;text-indent:-18pt;margin:0pt 0pt 0pt 36pt}\n\t\t\t.csEA39B13A{color:#000000;background-color:transparent;font-family:Arial;font-size:12pt;font-weight:normal;font-style:normal;}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<h2 class=\"cs4F0CA83\">\n\t\t\t<span class=\"cs4480B777\">1Password Dynamic Folder sample</span></h2>\n\t\t<p class=\"cs4A7471C4\"><span class=\"cs70680EAF\">Version</span><span class=\"cs3FB5A5BA\">: 1.0.0<br/></span><span class=\"cs70680EAF\">Author</span><span class=\"cs3FB5A5BA\">: Royal Apps</span></p><p class=\"cs4A7471C4\"><span class=\"cs3FB5A5BA\">This Dynamic Folder sample allows you to import credentials from 1Password. The <a class=\"csC76C7D68\" href=\"https://support.1password.com/command-line-getting-started/\"><span class=\"csEEB8B155\">1Password command-line tool</span></a></span><span class=\"cs3FB5A5BA\"> is required and the path where it is installed must be configured in the &quot;Custom Properties&quot; section. Also, your 1Password login details must be provided in the &quot;Login&quot; section of the custom properties.</span></p><p class=\"cs4A7471C4\"><span class=\"cs3FB5A5BA\">At the moment, items of all vaults are imported as Dynamic Credentials. This means that the username and password fields will remain empty after reloading the dynamic folder and only be requested when a connection is established that uses one of the credentials of this dynamic folder.</span></p><p class=\"cs4A7471C4\"><span class=\"cs3FB5A5BA\">Currently, there&#39;s </span><span class=\"cs70680EAF\">no support</span><span class=\"cs3FB5A5BA\"> for multi-factor-authentication.<br/>The script has only been tested with </span><span class=\"cs70680EAF\">Python 3</span><span class=\"cs3FB5A5BA\">.<br/>It might be required to manually log into 1Password using the command-line tool at least once before reloading this dynamic folder. Please consolut the <a class=\"csC76C7D68\" href=\"https://support.1password.com/command-line-getting-started/#get-started-with-the-command-line-tool\"><span class=\"csEEB8B155\">documentation</span></a></span><span class=\"cs3FB5A5BA\"> for instructions on how to do this.</span></p><h3 class=\"cs4F0CA83\">\n\t\t\t<span class=\"cs48D9DD3F\">Requirements</span></h3>\n\t\t<ul style=\"margin-top:0;margin-bottom:0;\">\n\t\t\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\"><a class=\"csC76C7D68\" href=\"https://support.1password.com/command-line-getting-started/\"><span class=\"csEEB8B155\">1Password command-line tool</span></a></span></li><li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: __future__</span></li><li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: sys</span></li><li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: functools</span></li><li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: json</span></li><li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module:&nbsp;subprocess</span></li><li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: sys</span></li></ul>\n\t\t<p class=\"cs8A075B43\"><span class=\"csEA39B13A\">&nbsp;</span></p><h3 class=\"cs4F0CA83\">\n\t\t\t<span class=\"cs48D9DD3F\">Setup</span></h3>\n\t\t<ul style=\"margin-top:0;margin-bottom:0;\">\n\t\t\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Specify the full, absolute path to the 1Password command-line tool&nbsp;in the &quot;Custom Properties&quot; section.</span></li><li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Specify your login details for accessing your 1Password account in the &quot;Login&quot; section of the &quot;Custom Properties&quot;.</span></li></ul>\n\t</body>\n</html>\n",
      "CustomProperties": [
        {
          "Name": "Command Line Tool Configuration",
          "Type": "Header",
          "Value": ""
        },
        {
          "Name": "OP Path (Windows)",
          "Type": "Text",
          "Value": "C:\\Program Files\\op.exe"
        },
        {
          "Name": "OP Path (macOS)",
          "Type": "Text",
          "Value": "/usr/local/bin/op"
        },
        {
          "Name": "Login",
          "Type": "Header",
          "Value": ""
        },
        {
          "Name": "Sign In Address",
          "Type": "URL",
          "Value": "my.1password.com"
        },
        {
          "Name": "Email Address",
          "Type": "Email",
          "Value": "TODO"
        },
        {
          "Name": "Secret Key",
          "Type": "Protected",
          "Value": "TODO"
        },
        {
          "Name": "Master Password",
          "Type": "Protected",
          "Value": "TODO"
        }
      ],
      "Script": "from __future__ import print_function\nimport sys\nfrom functools import partial\nimport json\nimport subprocess\nfrom sys import platform as _platform\n\nis_macOS = _platform.startswith(\"darwin\")\n\ndef exit_with_error(message):\n\tprintError = partial(print, file=sys.stderr) # python2 compatibility\n\n\tprintError(message)\n\tsys.exit(1)\n\nclass OnePassword:\n\top_path = \"\"\n\tsession_token = \"\"\n\n\tdef __init__(self, op_path):\n\t\tself.op_path = op_path\n\t\n\tdef sign_out(self):\n\t\tcmd_signout = [ self.op_path, \"signout\" ]\n\t\top = subprocess.Popen(cmd_signout, stdout=subprocess.PIPE)\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\tself.session_token = \"\"\n\n\t\treturn success\n\t\n\tdef sign_in(self, sign_in_address, email_address, secret_key, master_password):\n\t\tcmd_signin = [ self.op_path, \"signin\", sign_in_address, email_address, secret_key, \"--raw\" ]\n\t\top = subprocess.Popen(cmd_signin, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)\n\n\t\t(session_token, err) = op.communicate((master_password + \"\\n\").encode(\"utf-8\"))\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\tself.session_token = session_token.rstrip()\n\n\t\treturn success\n\n\tdef get_vaults(self):\n\t\tcmd_list_vaults = [ self.op_path, \"list\", \"vaults\", \"--session\", self.session_token ]\n\t\top = subprocess.Popen(cmd_list_vaults, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n\t\t(vaults_str, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tvaults = [ ]\n\n\t\tif success:\n\t\t\tvaults = json.loads(vaults_str)\n\t\t\n\t\treturn vaults\n\n\tdef get_items(self):\n\t\tcmd_list_items = [ self.op_path, \"list\", \"items\", \"--session\", self.session_token ]\n\t\top = subprocess.Popen(cmd_list_items, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n\t\t(items_str, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\titems = [ ]\n\n\t\tif success:\n\t\t\titems = json.loads(items_str)\n\t\t\n\t\treturn items\n\n\tdef get_item_details(self, item_id):\n\t\tcmd_get_item = [ self.op_path, \"get\", \"item\", item_id, \"--fields\", \"username,password\", \"--format\", \"JSON\", \"--session\", self.session_token ]\n\n\t\top = subprocess.Popen(cmd_get_item, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n\t\t(item_str, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\titem = { }\n\n\t\tif success:\n\t\t\titem = json.loads(item_str)\n\t\t\n\t\treturn item\n\nclass Converter:\n\tvaults = []\n\titems = []\n\n\tdef __init__(self, vaults, items):\n\t\tself.vaults = vaults\n\t\tself.items = items\n\n\tdef get_vault_name(self, vault_id):\n\t\tfor vault in vaults:\n\t\t\tif vault.get(\"uuid\", \"\") == vault_id:\n\t\t\t\treturn vault.get(\"name\", \"\")\n\t\t\n\t\treturn \"\"\n\n\tdef convert_items(self):\n\t\tobjects = []\n\n\t\tfor item in self.items:\n\t\t\toverview = item.get(\"overview\", None)\n\n\t\t\tif overview == None:\n\t\t\t\tcontinue\n\n\t\t\tid = item.get(\"uuid\", \"\")\n\t\t\ttitle = overview.get(\"title\", \"N/A\")\n\t\t\turl = overview.get(\"url\", \"\")\n\n\t\t\tvault_id = item.get(\"vaultUuid\", \"\")\n\t\t\tvault_name = self.get_vault_name(vault_id)\n\n\t\t\tcred = {\n\t\t\t\t\"Type\": \"DynamicCredential\",\n\t\t\t\t\"ID\": id,\n\t\t\t\t\"Name\": title,\n\t\t\t\t\"Path\": vault_name\n\t\t\t}\n\n\t\t\tif url != \"\":\n\t\t\t\tcred[\"URL\"] = url\n\n\t\t\tobjects.append(cred)\n\n\t\tstore = {\n\t\t\t\"Objects\": objects\n\t\t}\n\n\t\treturn store\n\t\t\nop_path_windows = r\"$CustomProperty.OPPathWindows$\"\nop_path_macOS = r\"$CustomProperty.OPPathmacOS$\"\nop_path = op_path_macOS if is_macOS else op_path_windows\n\nop_sign_in_address = r\"$CustomProperty.SignInAddress$\"\nop_email_address = r\"$CustomProperty.EmailAddress$\"\nop_secret_key = r\"$CustomProperty.SecretKey$\"\nop_master_password = r\"$CustomProperty.MasterPassword$\"\n\nop = OnePassword(op_path)\n\nop.sign_out()\n\nif not op.sign_in(op_sign_in_address, op_email_address, op_secret_key, op_master_password):\n\texit_with_error(\"Error while signing in\")\n\nvaults = op.get_vaults()\nitems = op.get_items()\n\nif not op.sign_out():\n\texit_with_error(\"Error while signing out\")\n\nconverter = Converter(vaults, items)\nstore = converter.convert_items()\nstore_json = json.dumps(store, indent=4)\n\nprint(store_json)",
      "ScriptInterpreter": "python",
      "DynamicCredentialScriptInterpreter": "python",
      "DynamicCredentialScript": "from __future__ import print_function\nimport sys\nfrom functools import partial\nimport json\nimport subprocess\nfrom sys import platform as _platform\n\nis_macOS = _platform.startswith(\"darwin\")\n\ndef exit_with_error(message):\n\tprintError = partial(print, file=sys.stderr) # python2 compatibility\n\n\tprintError(message)\n\tsys.exit(1)\n\nclass OnePassword:\n\top_path = \"\"\n\tsession_token = \"\"\n\n\tdef __init__(self, op_path):\n\t\tself.op_path = op_path\n\t\n\tdef sign_out(self):\n\t\tcmd_signout = [ self.op_path, \"signout\" ]\n\t\top = subprocess.Popen(cmd_signout, stdout=subprocess.PIPE)\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\tself.session_token = \"\"\n\n\t\treturn success\n\t\n\tdef sign_in(self, sign_in_address, email_address, secret_key, master_password):\n\t\tcmd_signin = [ self.op_path, \"signin\", sign_in_address, email_address, secret_key, \"--raw\" ]\n\t\top = subprocess.Popen(cmd_signin, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)\n\n\t\t(session_token, err) = op.communicate((master_password + \"\\n\").encode(\"utf-8\"))\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\tself.session_token = session_token.rstrip()\n\n\t\treturn success\n\n\tdef get_vaults(self):\n\t\tcmd_list_vaults = [ self.op_path, \"list\", \"vaults\", \"--session\", self.session_token ]\n\t\top = subprocess.Popen(cmd_list_vaults, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n\t\t(vaults_str, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tvaults = [ ]\n\n\t\tif success:\n\t\t\tvaults = json.loads(vaults_str)\n\t\t\n\t\treturn vaults\n\n\tdef get_items(self):\n\t\tcmd_list_items = [ self.op_path, \"list\", \"items\", \"--session\", self.session_token ]\n\t\top = subprocess.Popen(cmd_list_items, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n\t\t(items_str, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\titems = [ ]\n\n\t\tif success:\n\t\t\titems = json.loads(items_str)\n\t\t\n\t\treturn items\n\n\tdef get_item_details(self, item_id):\n\t\tcmd_get_item = [ self.op_path, \"get\", \"item\", item_id, \"--fields\", \"username,password\", \"--format\", \"JSON\", \"--session\", self.session_token ]\n\n\t\top = subprocess.Popen(cmd_get_item, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n\t\t(item_str, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\titem = { }\n\n\t\tif success:\n\t\t\titem = json.loads(item_str)\n\t\t\n\t\treturn item\n\nclass Converter:\n\tvaults = []\n\titems = []\n\n\tdef __init__(self, vaults, items):\n\t\tself.vaults = vaults\n\t\tself.items = items\n\n\tdef get_vault_name(self, vault_id):\n\t\tfor vault in vaults:\n\t\t\tif vault.get(\"uuid\", \"\") == vault_id:\n\t\t\t\treturn vault.get(\"name\", \"\")\n\t\t\n\t\treturn \"\"\n\n\tdef convert_items(self):\n\t\tobjects = []\n\n\t\tfor item in self.items:\n\t\t\toverview = item.get(\"overview\", None)\n\n\t\t\tif overview == None:\n\t\t\t\tcontinue\n\n\t\t\tid = item.get(\"uuid\", \"\")\n\t\t\ttitle = overview.get(\"title\", \"N/A\")\n\t\t\turl = overview.get(\"url\", \"\")\n\n\t\t\tvault_id = item.get(\"vaultUuid\", \"\")\n\t\t\tvault_name = self.get_vault_name(vault_id)\n\n\t\t\tcred = {\n\t\t\t\t\"Type\": \"DynamicCredential\",\n\t\t\t\t\"ID\": id,\n\t\t\t\t\"Name\": title,\n\t\t\t\t\"Path\": vault_name\n\t\t\t}\n\n\t\t\tif url != \"\":\n\t\t\t\tcred[\"URL\"] = url\n\n\t\t\tobjects.append(cred)\n\n\t\tstore = {\n\t\t\t\"Objects\": objects\n\t\t}\n\n\t\treturn store\n\t\t\nop_path_windows = r\"$CustomProperty.OPPathWindows$\"\nop_path_macOS = r\"$CustomProperty.OPPathmacOS$\"\nop_path = op_path_macOS if is_macOS else op_path_windows\n\nop_sign_in_address = r\"$CustomProperty.SignInAddress$\"\nop_email_address = r\"$CustomProperty.EmailAddress$\"\nop_secret_key = r\"$CustomProperty.SecretKey$\"\nop_master_password = r\"$CustomProperty.MasterPassword$\"\n\nitem_id = r\"$DynamicCredential.EffectiveID$\"\n\nop = OnePassword(op_path)\n\nif not op.sign_out():\n\texit_with_error(\"Error while signing out\")\n\nif not op.sign_in(op_sign_in_address, op_email_address, op_secret_key, op_master_password):\n\texit_with_error(\"Error while signing in\")\n\nitem_details = op. get_item_details(item_id)\n\nif not op.sign_out():\n\texit_with_error(\"Error while signing out\")\n\nstore_json = json.dumps(item_details, indent=4)\n\nprint(store_json)"
    }
  ]
}
{
  "Name": "Dynamic Folder Export",
  "Objects": [
    {
      "Type": "DynamicFolder",
      "Name": "1Password (Python)",
      "Description": "This Dynamic Folder sample allows you to import dynamic credentials from 1Password.",
      "Notes": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title></title>\n<style type=\"text/css\">.cs4F0CA83{text-align:left;text-indent:0pt;margin:0pt 0pt 0pt 0pt}\n\t\t\t.cs4480B777{color:#000000;background-color:transparent;font-family:Arial;font-size:16pt;font-weight:bold;font-style:normal;}\n\t\t\t.cs4A7471C4{text-align:left;text-indent:0pt;margin:12pt 0pt 12pt 0pt}\n\t\t\t.cs70680EAF{color:#000000;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:bold;font-style:normal;}\n\t\t\t.cs3FB5A5BA{color:#000000;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:normal;font-style:normal;}\n\t\t\t.csC76C7D68{color:#000000;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:normal;font-style:normal;text-decoration: none;}\n\t\t\t.csEEB8B155{color:#0000FF;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:normal;font-style:normal;text-decoration: underline;}\n\t\t\t.cs48D9DD3F{color:#000000;background-color:transparent;font-family:Arial;font-size:14pt;font-weight:bold;font-style:normal;}\n\t\t\t.csA0C0EFA3{text-align:left;margin:0pt 0pt 0pt 0pt;list-style-type:disc;color:#000000;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:normal;font-style:normal}\n\t\t\t.cs8A075B43{text-align:left;text-indent:-18pt;margin:0pt 0pt 0pt 36pt}\n\t\t\t.csEA39B13A{color:#000000;background-color:transparent;font-family:Arial;font-size:12pt;font-weight:normal;font-style:normal;}\n</style>\n<h2 class=\"cs4F0CA83\"><span class=\"cs4480B777\">1Password Dynamic Folder sample</span></h2>\n\n<p class=\"cs4A7471C4\"><span class=\"cs70680EAF\">Version</span><span class=\"cs3FB5A5BA\">: 2.0.0</span><br />\n<span class=\"cs70680EAF\">Author</span><span class=\"cs3FB5A5BA\">: Royal Apps</span></p>\n\n<p class=\"cs4A7471C4\"><span class=\"cs3FB5A5BA\">This Dynamic Folder sample allows you to import credentials from 1Password. The <a class=\"csC76C7D68\" href=\"https://support.1password.com/command-line-getting-started/\"><span class=\"csEEB8B155\">1Password command-line tool</span></a></span><span class=\"cs3FB5A5BA\"> is required and the path where it is installed must be configured in the &quot;Custom Properties&quot; section. Also, your 1Password login details must be provided in the &quot;Login&quot; section of the custom properties.</span></p>\n\n<p class=\"cs4A7471C4\"><span class=\"cs3FB5A5BA\">At the moment, items of all vaults are imported as Dynamic Credentials. This means that the username and password fields will remain empty after reloading the dynamic folder and only be requested when a connection is established that uses one of the credentials of this dynamic folder.</span></p>\n\n<h3 class=\"cs4F0CA83\"><span class=\"cs48D9DD3F\">Requirements</span></h3>\n\n<ul style=\"margin-top:0;margin-bottom:0;\">\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\"><a class=\"csC76C7D68\" href=\"https://support.1password.com/command-line-getting-started/\"><span class=\"csEEB8B155\">1Password command-line tool</span></a></span><span style=\"caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: Arial; font-size: 14.666666984558105px;\">&nbsp;(Version 1 and 2 are supported)</span></li>\n\t<li class=\"csA0C0EFA3\">Python 3 (Python 2 is <strong>NOT</strong> supported)</li>\n\t<li class=\"csA0C0EFA3\">Python Module:&nbsp;pexpect on macOS, wexpect on Windows</li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: __future__</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: sys</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: functools</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: json</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module:&nbsp;subprocess</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: sys</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: os</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: base64</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module:&nbsp;</span>tempfile</li>\n</ul>\n\n<p class=\"cs8A075B43\"><span class=\"csEA39B13A\">&nbsp;</span></p>\n\n<h3 class=\"cs4F0CA83\"><span class=\"cs48D9DD3F\">Setup</span></h3>\n\n<ul style=\"margin-top:0;margin-bottom:0;\">\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Specify the full, absolute path to the 1Password command-line tool&nbsp;in the &quot;Custom Properties&quot; section.</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Specify your login details for accessing your 1Password account in the &quot;Login&quot; section of the &quot;Custom Properties&quot;.</span></li>\n</ul>\n",
      "CustomProperties": [
        {
          "Name": "Command Line Tool Configuration",
          "Type": "Header",
          "Value": ""
        },
        {
          "Name": "OP Path (Windows)",
          "Type": "Text",
          "Value": "C:\\Program Files\\op.exe"
        },
        {
          "Name": "OP Path (macOS)",
          "Type": "Text",
          "Value": "/usr/local/bin/op"
        },
        {
          "Name": "Login",
          "Type": "Header",
          "Value": ""
        },
        {
          "Name": "Sign In Address",
          "Type": "URL",
          "Value": "my.1password.com"
        },
        {
          "Name": "Email Address",
          "Type": "Email",
          "Value": "TODO"
        },
        {
          "Name": "Secret Key",
          "Type": "Protected",
          "Value": "TODO"
        },
        {
          "Name": "Master Password",
          "Type": "Protected",
          "Value": "TODO"
        }
      ],
      "Script": "from __future__ import print_function\nfrom functools import partial\nfrom sys import platform as _platform\nfrom subprocess import Popen, PIPE\n\nimport tempfile\nimport sys\nimport json\nimport subprocess\nimport os\nimport base64\n\nop_path_windows = r\"$CustomProperty.OPPathWindows$\"\nop_path_macOS = r\"$CustomProperty.OPPathmacOS$\"\nsign_in_address = r\"$CustomProperty.SignInAddress$\"\nemail_address = r\"$CustomProperty.EmailAddress$\"\nsecret_key = r\"$CustomProperty.SecretKey$\"\nmaster_password = r\"$CustomProperty.MasterPassword$\"\n# item_id = r\"$DynamicCredential.EffectiveID$\"\n\nclass RoyalUtils:\n    @staticmethod\n    def is_macOS():\n        plat = _platform.lower()\n\n        return plat.startswith(\"darwin\")\n\n    @staticmethod\n    def get_last_line(the_string: str):\n        stripped_str = the_string.strip()\n\n        if \"\\n\" in stripped_str:\n            lines = stripped_str.splitlines()\n            stripped_str = lines[len(lines) - 1]\n\n        return stripped_str\n\n    @staticmethod\n    def random_uuid():\n        uuid = base64.b32encode(os.urandom(16)).decode().lower().rstrip(\"=\")\n\n        return uuid\n\n    @staticmethod\n    def exit_with_error(message, exception=None):\n        printError = partial(print, file=sys.stderr) # python2 compatibility\n\n        exception_message = str(exception) if exception else \"N/A\"\n\n        full_message = message + exception_message\n\n        printError(full_message)\n        sys.exit(1)\n\n    @staticmethod\n    def to_json(obj, pretty=False):\n        return json.dumps(obj, indent=4) if pretty else json.dumps(obj)\n\n    @staticmethod\n    def decode_to_utf8_string(potential_bytes):\n        if isinstance(potential_bytes, str):\n            return potential_bytes\n        else:\n            return potential_bytes.decode(\"utf-8\")\n\nif RoyalUtils.is_macOS():\n    import pexpect\nelse:\n    import wexpect\n\nclass RoyalInputPrompt:\n    @staticmethod\n    def show(title: str, message: str, defaultValue: str):\n        if RoyalUtils.is_macOS(): # macOS\n            return RoyalInputPrompt._show_macOS(title, message, defaultValue)\n        else: # Windows\n            return RoyalInputPrompt._show_windows(title, message, defaultValue)\n\n    @staticmethod\n    def _escape_string_quotes_js(target_string: str):\n        escaped_string = target_string.replace('\"', '\\\\\"')\n\n        return escaped_string\n\n    @staticmethod\n    def _escape_string_quotes_vbs(target_string: str):\n        escaped_string = target_string.replace('\"', '\\\"\\\"')\n\n        return escaped_string\n\n    @staticmethod\n    def _show_macOS(title: str, message: str, defaultValue: str):\n        script = f\"\"\"\n        function showInputPrompt(title, message, defaultValue) {{\n            let app = Application.currentApplication();\n            app.includeStandardAdditions = true;\n            \n            var value = \"\";\n            \n            try {{\n                let response = app.displayDialog(message, {{\n                    withTitle: title,\n                    defaultAnswer: defaultValue,\n                    withIcon: \"note\",\n                    buttons: [ \"Cancel\", \"OK\" ],\n                    defaultButton: \"OK\",\n                    cancelButton: \"Cancel\"\n                }});\n                \n                if (response.buttonReturned == \"OK\") {{\n                    value = response.textReturned;\n                }}\n            }} catch {{ }}\n            \n            return value;\n        }}\n\n        function run(argv) {{\n            let value = showInputPrompt(\"{RoyalInputPrompt._escape_string_quotes_js(title)}\", \"{RoyalInputPrompt._escape_string_quotes_js(message)}\", \"{RoyalInputPrompt._escape_string_quotes_js(defaultValue)}\");\n            \n            return value;\n        }}\"\"\"\n\n        encoding = \"utf-8\"\n\n        cmd = [ \"osascript\", \"-l\", \"JavaScript\", \"-\" ]\n\n        proc = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        stdout, _ = proc.communicate(script.encode(encoding))\n\n        return_value = RoyalUtils.decode_to_utf8_string(stdout)\n\n        return return_value\n\n    @staticmethod\n    def _show_windows(title: str, message: str, defaultValue: str):\n        return_value = \"\"\n\n        script = f\"\"\"\n        WScript.Echo InputBox(\"{RoyalInputPrompt._escape_string_quotes_vbs(message)}\", \"{RoyalInputPrompt._escape_string_quotes_vbs(title)}\", \"{RoyalInputPrompt._escape_string_quotes_vbs(defaultValue)}\")\n        \"\"\"\n\n        encoding = \"utf-8\"\n\n        temp_file = tempfile.NamedTemporaryFile(suffix=\".vbs\", mode=\"w\", encoding=encoding, delete=False)\n        temp_file_path = temp_file.name\n\n        temp_file.write(script)\n        temp_file.flush()\n\n        temp_file.close()\n\n        try:\n            cmd = [ \"cscript.exe\", \"/Nologo\", temp_file_path ]\n\n            proc = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n            stdout, _ = proc.communicate()\n\n            return_value = RoyalUtils.decode_to_utf8_string(stdout)\n        except:\n            pass\n        finally:\n            if os.path.exists(temp_file_path):\n                os.remove(temp_file_path)\n\n        return return_value\n\nclass OnePassword:\n    config_path = \"\"\n    config_file_path = \"\"\n\n    op_path = \"\"\n    session_token = \"\"\n    account_shorthand = \"\"\n\n    op_cli_version = \"\"\n    is_op_cli_v2 = False\n\n    unknown_error_string = \"An unknown error occurred.\"\n\n    def __init__(self, op_path):\n        self.config_path = os.path.expanduser(\"~/.config/op\")\n        self.config_file_path = os.path.join(self.config_path, \"config\")\n\n        self.op_path = op_path\n\n        op_cli_version = \"1\"\n\n        try:\n            op_cli_version = self.get_cli_version()\n        except:\n            pass\n\n        if not op_cli_version:\n            op_cli_version = \"1\"\n\n        self.op_cli_version = op_cli_version\n        self.is_op_cli_v2 = op_cli_version.startswith(\"2\")\n    \n    def get_cli_version(self):\n        cmd_get_version = [ self.op_path, \"--version\" ]\n        op = subprocess.Popen(cmd_get_version, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n        (output, err) = op.communicate()\n        exit_code = op.wait()\n\n        success = exit_code == 0\n\n        op_cli_version = \"\"\n\n        if success:\n            op_cli_version = RoyalUtils.decode_to_utf8_string(output)\n            op_cli_version = RoyalUtils.get_last_line(op_cli_version)\n        else:\n            if not err:\n                err = self.unknown_error_string\n            else:\n                err = RoyalUtils.decode_to_utf8_string(err)\n\n            raise Exception(err)\n        \n        return op_cli_version\n    \n    def get_device_id(self):\n        device_id = os.environ.get(\"OP_DEVICE\")\n\n        return device_id\n    \n    def set_device_id(self, device_id):\n        os.environ[\"OP_DEVICE\"] = device_id\n\n        if not os.path.exists(self.config_file_path):\n            config_json = RoyalUtils.to_json({ \"device\": device_id }, True)\n\n            try:\n                file = open(self.config_file_path, \"w\")\n\n                file.write(config_json)\n                file.close()\n\n                if RoyalUtils.is_macOS:\n                    os.chmod(self.config_file_path, 0o600)\n                \n                return True\n            except:\n                return False\n        \n        return True\n    \n    def get_account_shorthand(self, sign_in_address, email_address):\n        shorthand = sign_in_address.replace(\".\", \"_\") + \"__\" + email_address.replace(\".\", \"_\").replace(\"@\", \"_\").replace(\"+\", \"_\")\n\n        return shorthand\n\n    def sign_out(self):\n        cmd_signout = [ ]\n\n        if self.account_shorthand:\n            cmd_signout = [\n                self.op_path,\n                \"signout\",\n                \"--account\", self.account_shorthand\n            ]\n        else:\n            cmd_signout = [\n                self.op_path,\n                \"signout\"\n            ]\n\n        op = subprocess.Popen(cmd_signout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        \n        (output, err) = op.communicate()\n        exit_code = op.wait()\n\n        success = exit_code == 0\n\n        if success:\n            self.session_token = \"\"\n            self.account_shorthand = \"\"\n        else:\n            if not err:\n                err = self.unknown_error_string\n            else:\n                err = RoyalUtils.decode_to_utf8_string(err)\n\n            raise Exception(err)\n    \n    def sign_in(self, sign_in_address, email_address, secret_key, master_password, second_try=False):\n        shorthand = self.get_account_shorthand(sign_in_address, email_address)\n\n        timeout = 10\n\n        cmd = self.op_path\n\n        args = [ ]\n\n        if self.is_op_cli_v2:\n            args = [\n                \"account\", \"add\",\n                \"--signin\",\n                \"--address\", sign_in_address,\n                \"--email\", email_address,\n                \"--secret-key\", secret_key,\n                \"--shorthand\", shorthand,\n                \"--raw\"\n            ]\n        else:\n            args = [\n                \"signin\",\n                sign_in_address,\n                email_address,\n                secret_key,\n                \"--shorthand\", shorthand,\n                \"--raw\"\n            ]\n\n        eof = None\n        proc = None\n\n        if RoyalUtils.is_macOS():\n            eof = pexpect.EOF\n            proc = pexpect.spawn(cmd, args)\n        else:\n            eof = wexpect.EOF\n            proc = wexpect.spawn(cmd, args)\n\n        exp_str_password = f\"Enter the password for.*:\"\n        exp_str_error = \"\\[ERROR\\].*\"\n\n        err = None\n\n        try:\n            exp_pw_prompt = proc.expect([ exp_str_password, exp_str_error ], timeout=timeout)\n\n            if exp_pw_prompt == 0: # Password Prompt\n                proc.sendline(master_password)\n\n                exp_str_mfa = \"Enter your.*authentication code.*:\"\n\n                exp_mfa = proc.expect([ exp_str_mfa, exp_str_error, eof ], timeout=timeout)\n\n                if exp_mfa == 0: # MFA Prompt\n                    mfa_code = RoyalInputPrompt.show(\"1Password Multi-Factor-Authentication\", f\"Enter multi-factor authentication code for {email_address}:\", \"\")\n                    mfa_code = mfa_code.replace(\"\\n\", \"\").replace(\"\\r\", \"\")\n\n                    if not mfa_code:\n                        raise Exception(\"No multi-factor code provided\")\n                    \n                    proc.sendline(mfa_code)\n                    exp_mfa_sent = proc.expect([ exp_str_error, eof ], timeout=timeout)\n\n                    if exp_mfa_sent == 0: # Error\n                        err = RoyalUtils.get_last_line(RoyalUtils.decode_to_utf8_string(proc.match.string))\n                        \n                        raise Exception(err)\n                elif exp_mfa == 1: # Error\n                    err = RoyalUtils.get_last_line(RoyalUtils.decode_to_utf8_string(proc.match.string))\n                    \n                    raise Exception(err)\n\n                output = proc.before\n\n                if output:\n                    output = RoyalUtils.decode_to_utf8_string(output)\n                \n                proc.close()\n\n                exit_code = proc.exitstatus\n                success = exit_code == 0\n\n                if success:\n                    self.session_token = RoyalUtils.get_last_line(output)\n                    self.account_shorthand = shorthand\n                else:\n                    if not err:\n                        err = self.unknown_error_string\n\n                    raise Exception(err)\n            elif exp_pw_prompt == 1: # Error\n                err = RoyalUtils.get_last_line(RoyalUtils.decode_to_utf8_string(proc.match.string))\n\n                if not second_try:\n                    if \"No saved device ID\" in err:\n                        export_start_str = \"export OP_DEVICE=\"\n                        device_id = \"\"\n\n                        if export_start_str in err:\n                            start_index = err.index(export_start_str) + len(export_start_str)\n                            device_id = err[start_index:]\n                            end_index = device_id.index(\"`\")\n                            device_id = device_id[:end_index]\n\n                        if not device_id or len(device_id) != 26:\n                            device_id = RoyalUtils.random_uuid()\n\n                        self.set_device_id(device_id)\n\n                        self.sign_in(sign_in_address, email_address, secret_key, master_password, second_try=True)\n\n                        return\n\n                if not err:\n                    err = self.unknown_error_string\n\n                raise Exception(err)\n        except Exception as ex:\n            err = str(ex)\n\n            if not err:\n                err = self.unknown_error_string\n\n            raise Exception(err)\n\n    def get_vaults(self):\n        cmd_list_vaults = [ ]\n\n        if self.is_op_cli_v2:\n            cmd_list_vaults = [\n                self.op_path,\n                \"vault\", \"list\",\n                \"--format=json\",\n                \"--account\", self.account_shorthand,\n                \"--session\", self.session_token\n            ]\n        else:\n            cmd_list_vaults = [\n                self.op_path,\n                \"list\", \"vaults\",\n                \"--account\", self.account_shorthand,\n                \"--session\", self.session_token\n            ]\n        \n        op = subprocess.Popen(cmd_list_vaults, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n        (output, err) = op.communicate()\n        exit_code = op.wait()\n\n        success = exit_code == 0\n\n        if success:\n            output = RoyalUtils.decode_to_utf8_string(output)\n\n            vaults_str = \"\"\n\n            if self.is_op_cli_v2:\n                vaults_str = output\n            else:\n                vaults_str = RoyalUtils.get_last_line(output)\n            \n            vaults = json.loads(vaults_str)\n\n            return vaults\n        \n        if not err:\n            err = self.unknown_error_string\n        else:\n            err = RoyalUtils.decode_to_utf8_string(err)\n        \n        raise Exception(err)\n\n    def get_items(self):\n        cmd_list_items = [ ]\n\n        if self.is_op_cli_v2:\n            cmd_list_items = [\n                self.op_path,\n                \"item\", \"list\",\n                \"--format=json\",\n                \"--account\", self.account_shorthand,\n                \"--session\", self.session_token\n            ]\n        else:\n            cmd_list_items = [\n                self.op_path,\n                \"list\", \"items\",\n                \"--account\", self.account_shorthand,\n                \"--session\", self.session_token\n            ]\n\n        op = subprocess.Popen(cmd_list_items, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n        (output, err) = op.communicate()\n        exit_code = op.wait()\n\n        success = exit_code == 0\n\n        if success:\n            output = RoyalUtils.decode_to_utf8_string(output)\n\n            items_str = \"\"\n\n            if self.is_op_cli_v2:\n                items_str = output\n            else:\n                items_str = RoyalUtils.get_last_line(output)\n\n            items = json.loads(items_str)\n        \n            return items\n        else:\n            if not err:\n                err = self.unknown_error_string\n            else:\n                err = RoyalUtils.decode_to_utf8_string(err)\n        \n            raise Exception(err)\n\n    def get_item_details(self, item_id):\n        cmd_get_item = [ ]\n\n        if self.is_op_cli_v2:\n            cmd_get_item = [\n                self.op_path,\n                \"item\", \"get\", item_id,\n                # \"--fields\", \"label=password,label=privatekey\",\n                \"--format=JSON\",\n                \"--account\", self.account_shorthand,\n                \"--session\", self.session_token\n            ]\n        else:\n            cmd_get_item = [\n                self.op_path,\n                \"get\", \"item\", item_id,\n                \"--fields\", \"username,password\",\n                \"--format\", \"JSON\",\n                \"--account\", self.account_shorthand,\n                \"--session\", self.session_token\n            ]\n\n        op = subprocess.Popen(cmd_get_item, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n        (output, err) = op.communicate()\n        exit_code = op.wait()\n\n        success = exit_code == 0\n\n        if success:\n            output = RoyalUtils.decode_to_utf8_string(output)\n\n            item_str = \"\"\n\n            if self.is_op_cli_v2:\n                item_str = output\n            else:\n                item_str = RoyalUtils.get_last_line(output)\n            \n            item = json.loads(item_str)\n        \n            return item\n        else:\n            if not err:\n                err = self.unknown_error_string\n            else:\n                err = RoyalUtils.decode_to_utf8_string(err)\n            \n            raise Exception(err)\n\nclass Converter:\n    @staticmethod\n    def get_vault_name(vaults, vault_id, is_op_cli_v2):\n        for vault in vaults:\n            if is_op_cli_v2:\n                if vault.get(\"id\", \"\") == vault_id:\n                    return vault.get(\"name\", \"\")\n            else:\n                if vault.get(\"uuid\", \"\") == vault_id:\n                    return vault.get(\"name\", \"\")\n        \n        return \"\"\n\n    @staticmethod\n    def convert_items(vaults, items, is_op_cli_v2):\n        objects = []\n\n        for item in items:\n            overview = None\n\n            if is_op_cli_v2:\n                overview = item\n            else:\n                overview = item.get(\"overview\", None)\n\n            if overview == None:\n                continue\n\n            id = \"\"\n\n            if is_op_cli_v2:\n                id = item.get(\"id\", \"\")\n            else:\n                id = item.get(\"uuid\", \"\")\n            \n            title = overview.get(\"title\", \"N/A\")\n            url = overview.get(\"url\", \"\")\n\n            vault_id = \"\"\n\n            if is_op_cli_v2:\n                item_vault = item.get(\"vault\", None)\n\n                if item_vault:\n                    vault_id = item_vault.get(\"id\", \"\")\n            else:\n                vault_id = item.get(\"vaultUuid\", \"\")\n\n            vault_name = Converter.get_vault_name(vaults, vault_id, is_op_cli_v2)\n\n            cred = {\n                \"Type\": \"DynamicCredential\",\n                \"ID\": id,\n                \"Name\": title,\n                \"Path\": vault_name\n            }\n\n            if url != \"\":\n                cred[\"URL\"] = url\n\n            objects.append(cred)\n\n        objects = sorted(objects, key = lambda i: (i[\"Path\"], i[\"Name\"]))\n\n        store = {\n            \"Objects\": objects\n        }\n\n        return store\n    \n    @staticmethod\n    def convert_item(item_details, is_op_cli_v2):\n        username = None\n        password = None\n        private_key = None\n\n        if is_op_cli_v2:\n            fields = item_details.get(\"fields\")\n\n            if not fields:\n                fields = item_details\n\n            for field in fields:\n                field_id = field.get(\"id\", None)\n                field_label = field.get(\"label\", None)\n                field_value = field.get(\"value\", None)\n\n                if field_id == \"username\" or field_label == \"username\":\n                    username = field_value\n                elif field_id == \"password\" or field_label == \"password\":\n                    password = field_value\n                elif field_id == \"private_key\" or field_label == \"private key\":\n                    private_key = field_value\n        else:\n            username = item_details.get(\"username\", None)\n            password = item_details.get(\"password\", None)\n\n        cred = { }\n\n        if username is not None:\n            cred[\"Username\"] = username\n\n        if password is not None:\n            cred[\"Password\"] = password\n\n        if private_key is not None:\n            cred[\"KeyFileContent\"] = private_key\n\n        return cred\n\nclass Coordinator:\n    op_path = \"\"\n    sign_in_address = \"\"\n    email_address = \"\"\n    secret_key = \"\"\n    master_password = \"\"\n\n    error_message_sign_in = \"Error while signing in: \"\n    error_message_sign_out = \"Error while signing out: \"\n    error_message_get_vaults = \"Error while getting vaults: \"\n    error_message_get_items = \"Error while getting items: \"\n    error_message_get_item_details = \"Error while getting item details: \"\n\n    def __init__(self, op_path_windows, op_path_macOS, sign_in_address, email_address, secret_key, master_password):\n        self.op_path = op_path_macOS if RoyalUtils.is_macOS() else op_path_windows\n        self.sign_in_address = sign_in_address\n        self.email_address = email_address\n        self.secret_key = secret_key\n        self.master_password = master_password\n        \n    def get_items(self):\n        op = OnePassword(self.op_path)\n\n        try:\n            op.sign_out()\n        except Exception:\n            pass\n\n        try:\n            op.sign_in(self.sign_in_address, self.email_address, self.secret_key, self.master_password)\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_sign_in, e)\n\n        vaults = None\n\n        try:\n            vaults = op.get_vaults()\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_get_vaults, e)\n        \n        items = None\n\n        try:\n            items = op.get_items()\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_get_items, e)\n\n        try:\n            op.sign_out()\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_sign_out, e)\n\n        store = Converter.convert_items(vaults, items, op.is_op_cli_v2)\n        store_json = RoyalUtils.to_json(store, True)\n\n        print(store_json)\n    \n    def get_item_details(self, item_id):\n        op = OnePassword(self.op_path)\n\n        try:\n            op.sign_out()\n        except Exception:\n            pass\n\n        try:\n            op.sign_in(self.sign_in_address, self.email_address, self.secret_key, self.master_password)\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_sign_in, e)\n\n        item_details = None\n\n        try:\n            item_details = op.get_item_details(item_id)\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_get_item_details, e)\n\n        try:\n            op.sign_out()\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_sign_out, e)\n\n        store = Converter.convert_item(item_details, op.is_op_cli_v2)\n        store_json = RoyalUtils.to_json(store, True)\n\n        print(store_json)\n\ncoordinator = Coordinator(op_path_windows, op_path_macOS, sign_in_address, email_address, secret_key, master_password)\ncoordinator.get_items()\n# coordinator.get_item_details(item_id)",
      "ScriptInterpreter": "python",
      "DynamicCredentialScriptInterpreter": "python",
      "DynamicCredentialScript": "from __future__ import print_function\nfrom functools import partial\nfrom sys import platform as _platform\nfrom subprocess import Popen, PIPE\n\nimport tempfile\nimport sys\nimport json\nimport subprocess\nimport os\nimport base64\n\nop_path_windows = r\"$CustomProperty.OPPathWindows$\"\nop_path_macOS = r\"$CustomProperty.OPPathmacOS$\"\nsign_in_address = r\"$CustomProperty.SignInAddress$\"\nemail_address = r\"$CustomProperty.EmailAddress$\"\nsecret_key = r\"$CustomProperty.SecretKey$\"\nmaster_password = r\"$CustomProperty.MasterPassword$\"\nitem_id = r\"$DynamicCredential.EffectiveID$\"\n\nclass RoyalUtils:\n    @staticmethod\n    def is_macOS():\n        plat = _platform.lower()\n\n        return plat.startswith(\"darwin\")\n\n    @staticmethod\n    def get_last_line(the_string: str):\n        stripped_str = the_string.strip()\n\n        if \"\\n\" in stripped_str:\n            lines = stripped_str.splitlines()\n            stripped_str = lines[len(lines) - 1]\n\n        return stripped_str\n\n    @staticmethod\n    def random_uuid():\n        uuid = base64.b32encode(os.urandom(16)).decode().lower().rstrip(\"=\")\n\n        return uuid\n\n    @staticmethod\n    def exit_with_error(message, exception=None):\n        printError = partial(print, file=sys.stderr) # python2 compatibility\n\n        exception_message = str(exception) if exception else \"N/A\"\n\n        full_message = message + exception_message\n\n        printError(full_message)\n        sys.exit(1)\n\n    @staticmethod\n    def to_json(obj, pretty=False):\n        return json.dumps(obj, indent=4) if pretty else json.dumps(obj)\n\n    @staticmethod\n    def decode_to_utf8_string(potential_bytes):\n        if isinstance(potential_bytes, str):\n            return potential_bytes\n        else:\n            return potential_bytes.decode(\"utf-8\")\n\nif RoyalUtils.is_macOS():\n    import pexpect\nelse:\n    import wexpect\n\nclass RoyalInputPrompt:\n    @staticmethod\n    def show(title: str, message: str, defaultValue: str):\n        if RoyalUtils.is_macOS(): # macOS\n            return RoyalInputPrompt._show_macOS(title, message, defaultValue)\n        else: # Windows\n            return RoyalInputPrompt._show_windows(title, message, defaultValue)\n\n    @staticmethod\n    def _escape_string_quotes_js(target_string: str):\n        escaped_string = target_string.replace('\"', '\\\\\"')\n\n        return escaped_string\n\n    @staticmethod\n    def _escape_string_quotes_vbs(target_string: str):\n        escaped_string = target_string.replace('\"', '\\\"\\\"')\n\n        return escaped_string\n\n    @staticmethod\n    def _show_macOS(title: str, message: str, defaultValue: str):\n        script = f\"\"\"\n        function showInputPrompt(title, message, defaultValue) {{\n            let app = Application.currentApplication();\n            app.includeStandardAdditions = true;\n            \n            var value = \"\";\n            \n            try {{\n                let response = app.displayDialog(message, {{\n                    withTitle: title,\n                    defaultAnswer: defaultValue,\n                    withIcon: \"note\",\n                    buttons: [ \"Cancel\", \"OK\" ],\n                    defaultButton: \"OK\",\n                    cancelButton: \"Cancel\"\n                }});\n                \n                if (response.buttonReturned == \"OK\") {{\n                    value = response.textReturned;\n                }}\n            }} catch {{ }}\n            \n            return value;\n        }}\n\n        function run(argv) {{\n            let value = showInputPrompt(\"{RoyalInputPrompt._escape_string_quotes_js(title)}\", \"{RoyalInputPrompt._escape_string_quotes_js(message)}\", \"{RoyalInputPrompt._escape_string_quotes_js(defaultValue)}\");\n            \n            return value;\n        }}\"\"\"\n\n        encoding = \"utf-8\"\n\n        cmd = [ \"osascript\", \"-l\", \"JavaScript\", \"-\" ]\n\n        proc = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n        stdout, _ = proc.communicate(script.encode(encoding))\n\n        return_value = RoyalUtils.decode_to_utf8_string(stdout)\n\n        return return_value\n\n    @staticmethod\n    def _show_windows(title: str, message: str, defaultValue: str):\n        return_value = \"\"\n\n        script = f\"\"\"\n        WScript.Echo InputBox(\"{RoyalInputPrompt._escape_string_quotes_vbs(message)}\", \"{RoyalInputPrompt._escape_string_quotes_vbs(title)}\", \"{RoyalInputPrompt._escape_string_quotes_vbs(defaultValue)}\")\n        \"\"\"\n\n        encoding = \"utf-8\"\n\n        temp_file = tempfile.NamedTemporaryFile(suffix=\".vbs\", mode=\"w\", encoding=encoding, delete=False)\n        temp_file_path = temp_file.name\n\n        temp_file.write(script)\n        temp_file.flush()\n\n        temp_file.close()\n\n        try:\n            cmd = [ \"cscript.exe\", \"/Nologo\", temp_file_path ]\n\n            proc = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n            stdout, _ = proc.communicate()\n\n            return_value = RoyalUtils.decode_to_utf8_string(stdout)\n        except:\n            pass\n        finally:\n            if os.path.exists(temp_file_path):\n                os.remove(temp_file_path)\n\n        return return_value\n\nclass OnePassword:\n    config_path = \"\"\n    config_file_path = \"\"\n\n    op_path = \"\"\n    session_token = \"\"\n    account_shorthand = \"\"\n\n    op_cli_version = \"\"\n    is_op_cli_v2 = False\n\n    unknown_error_string = \"An unknown error occurred.\"\n\n    def __init__(self, op_path):\n        self.config_path = os.path.expanduser(\"~/.config/op\")\n        self.config_file_path = os.path.join(self.config_path, \"config\")\n\n        self.op_path = op_path\n\n        op_cli_version = \"1\"\n\n        try:\n            op_cli_version = self.get_cli_version()\n        except:\n            pass\n\n        if not op_cli_version:\n            op_cli_version = \"1\"\n\n        self.op_cli_version = op_cli_version\n        self.is_op_cli_v2 = op_cli_version.startswith(\"2\")\n    \n    def get_cli_version(self):\n        cmd_get_version = [ self.op_path, \"--version\" ]\n        op = subprocess.Popen(cmd_get_version, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n        (output, err) = op.communicate()\n        exit_code = op.wait()\n\n        success = exit_code == 0\n\n        op_cli_version = \"\"\n\n        if success:\n            op_cli_version = RoyalUtils.decode_to_utf8_string(output)\n            op_cli_version = RoyalUtils.get_last_line(op_cli_version)\n        else:\n            if not err:\n                err = self.unknown_error_string\n            else:\n                err = RoyalUtils.decode_to_utf8_string(err)\n\n            raise Exception(err)\n        \n        return op_cli_version\n    \n    def get_device_id(self):\n        device_id = os.environ.get(\"OP_DEVICE\")\n\n        return device_id\n    \n    def set_device_id(self, device_id):\n        os.environ[\"OP_DEVICE\"] = device_id\n\n        if not os.path.exists(self.config_file_path):\n            config_json = RoyalUtils.to_json({ \"device\": device_id }, True)\n\n            try:\n                file = open(self.config_file_path, \"w\")\n\n                file.write(config_json)\n                file.close()\n\n                if RoyalUtils.is_macOS:\n                    os.chmod(self.config_file_path, 0o600)\n                \n                return True\n            except:\n                return False\n        \n        return True\n    \n    def get_account_shorthand(self, sign_in_address, email_address):\n        shorthand = sign_in_address.replace(\".\", \"_\") + \"__\" + email_address.replace(\".\", \"_\").replace(\"@\", \"_\").replace(\"+\", \"_\")\n\n        return shorthand\n\n    def sign_out(self):\n        cmd_signout = [ ]\n\n        if self.account_shorthand:\n            cmd_signout = [\n                self.op_path,\n                \"signout\",\n                \"--account\", self.account_shorthand\n            ]\n        else:\n            cmd_signout = [\n                self.op_path,\n                \"signout\"\n            ]\n\n        op = subprocess.Popen(cmd_signout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        \n        (output, err) = op.communicate()\n        exit_code = op.wait()\n\n        success = exit_code == 0\n\n        if success:\n            self.session_token = \"\"\n            self.account_shorthand = \"\"\n        else:\n            if not err:\n                err = self.unknown_error_string\n            else:\n                err = RoyalUtils.decode_to_utf8_string(err)\n\n            raise Exception(err)\n    \n    def sign_in(self, sign_in_address, email_address, secret_key, master_password, second_try=False):\n        shorthand = self.get_account_shorthand(sign_in_address, email_address)\n\n        timeout = 10\n\n        cmd = self.op_path\n\n        args = [ ]\n\n        if self.is_op_cli_v2:\n            args = [\n                \"account\", \"add\",\n                \"--signin\",\n                \"--address\", sign_in_address,\n                \"--email\", email_address,\n                \"--secret-key\", secret_key,\n                \"--shorthand\", shorthand,\n                \"--raw\"\n            ]\n        else:\n            args = [\n                \"signin\",\n                sign_in_address,\n                email_address,\n                secret_key,\n                \"--shorthand\", shorthand,\n                \"--raw\"\n            ]\n\n        eof = None\n        proc = None\n\n        if RoyalUtils.is_macOS():\n            eof = pexpect.EOF\n            proc = pexpect.spawn(cmd, args)\n        else:\n            eof = wexpect.EOF\n            proc = wexpect.spawn(cmd, args)\n\n        exp_str_password = f\"Enter the password for.*:\"\n        exp_str_error = \"\\[ERROR\\].*\"\n\n        err = None\n\n        try:\n            exp_pw_prompt = proc.expect([ exp_str_password, exp_str_error ], timeout=timeout)\n\n            if exp_pw_prompt == 0: # Password Prompt\n                proc.sendline(master_password)\n\n                exp_str_mfa = \"Enter your.*authentication code.*:\"\n\n                exp_mfa = proc.expect([ exp_str_mfa, exp_str_error, eof ], timeout=timeout)\n\n                if exp_mfa == 0: # MFA Prompt\n                    mfa_code = RoyalInputPrompt.show(\"1Password Multi-Factor-Authentication\", f\"Enter multi-factor authentication code for {email_address}:\", \"\")\n                    mfa_code = mfa_code.replace(\"\\n\", \"\").replace(\"\\r\", \"\")\n\n                    if not mfa_code:\n                        raise Exception(\"No multi-factor code provided\")\n                    \n                    proc.sendline(mfa_code)\n                    exp_mfa_sent = proc.expect([ exp_str_error, eof ], timeout=timeout)\n\n                    if exp_mfa_sent == 0: # Error\n                        err = RoyalUtils.get_last_line(RoyalUtils.decode_to_utf8_string(proc.match.string))\n                        \n                        raise Exception(err)\n                elif exp_mfa == 1: # Error\n                    err = RoyalUtils.get_last_line(RoyalUtils.decode_to_utf8_string(proc.match.string))\n                    \n                    raise Exception(err)\n\n                output = proc.before\n\n                if output:\n                    output = RoyalUtils.decode_to_utf8_string(output)\n                \n                proc.close()\n\n                exit_code = proc.exitstatus\n                success = exit_code == 0\n\n                if success:\n                    self.session_token = RoyalUtils.get_last_line(output)\n                    self.account_shorthand = shorthand\n                else:\n                    if not err:\n                        err = self.unknown_error_string\n\n                    raise Exception(err)\n            elif exp_pw_prompt == 1: # Error\n                err = RoyalUtils.get_last_line(RoyalUtils.decode_to_utf8_string(proc.match.string))\n\n                if not second_try:\n                    if \"No saved device ID\" in err:\n                        export_start_str = \"export OP_DEVICE=\"\n                        device_id = \"\"\n\n                        if export_start_str in err:\n                            start_index = err.index(export_start_str) + len(export_start_str)\n                            device_id = err[start_index:]\n                            end_index = device_id.index(\"`\")\n                            device_id = device_id[:end_index]\n\n                        if not device_id or len(device_id) != 26:\n                            device_id = RoyalUtils.random_uuid()\n\n                        self.set_device_id(device_id)\n\n                        self.sign_in(sign_in_address, email_address, secret_key, master_password, second_try=True)\n\n                        return\n\n                if not err:\n                    err = self.unknown_error_string\n\n                raise Exception(err)\n        except Exception as ex:\n            err = str(ex)\n\n            if not err:\n                err = self.unknown_error_string\n\n            raise Exception(err)\n\n    def get_vaults(self):\n        cmd_list_vaults = [ ]\n\n        if self.is_op_cli_v2:\n            cmd_list_vaults = [\n                self.op_path,\n                \"vault\", \"list\",\n                \"--format=json\",\n                \"--account\", self.account_shorthand,\n                \"--session\", self.session_token\n            ]\n        else:\n            cmd_list_vaults = [\n                self.op_path,\n                \"list\", \"vaults\",\n                \"--account\", self.account_shorthand,\n                \"--session\", self.session_token\n            ]\n        \n        op = subprocess.Popen(cmd_list_vaults, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n        (output, err) = op.communicate()\n        exit_code = op.wait()\n\n        success = exit_code == 0\n\n        if success:\n            output = RoyalUtils.decode_to_utf8_string(output)\n\n            vaults_str = \"\"\n\n            if self.is_op_cli_v2:\n                vaults_str = output\n            else:\n                vaults_str = RoyalUtils.get_last_line(output)\n            \n            vaults = json.loads(vaults_str)\n\n            return vaults\n        \n        if not err:\n            err = self.unknown_error_string\n        else:\n            err = RoyalUtils.decode_to_utf8_string(err)\n        \n        raise Exception(err)\n\n    def get_items(self):\n        cmd_list_items = [ ]\n\n        if self.is_op_cli_v2:\n            cmd_list_items = [\n                self.op_path,\n                \"item\", \"list\",\n                \"--format=json\",\n                \"--account\", self.account_shorthand,\n                \"--session\", self.session_token\n            ]\n        else:\n            cmd_list_items = [\n                self.op_path,\n                \"list\", \"items\",\n                \"--account\", self.account_shorthand,\n                \"--session\", self.session_token\n            ]\n\n        op = subprocess.Popen(cmd_list_items, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n        (output, err) = op.communicate()\n        exit_code = op.wait()\n\n        success = exit_code == 0\n\n        if success:\n            output = RoyalUtils.decode_to_utf8_string(output)\n\n            items_str = \"\"\n\n            if self.is_op_cli_v2:\n                items_str = output\n            else:\n                items_str = RoyalUtils.get_last_line(output)\n\n            items = json.loads(items_str)\n        \n            return items\n        else:\n            if not err:\n                err = self.unknown_error_string\n            else:\n                err = RoyalUtils.decode_to_utf8_string(err)\n        \n            raise Exception(err)\n\n    def get_item_details(self, item_id):\n        cmd_get_item = [ ]\n\n        if self.is_op_cli_v2:\n            cmd_get_item = [\n                self.op_path,\n                \"item\", \"get\", item_id,\n                # \"--fields\", \"label=password,label=privatekey\",\n                \"--format=JSON\",\n                \"--account\", self.account_shorthand,\n                \"--session\", self.session_token\n            ]\n        else:\n            cmd_get_item = [\n                self.op_path,\n                \"get\", \"item\", item_id,\n                \"--fields\", \"username,password\",\n                \"--format\", \"JSON\",\n                \"--account\", self.account_shorthand,\n                \"--session\", self.session_token\n            ]\n\n        op = subprocess.Popen(cmd_get_item, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n        (output, err) = op.communicate()\n        exit_code = op.wait()\n\n        success = exit_code == 0\n\n        if success:\n            output = RoyalUtils.decode_to_utf8_string(output)\n\n            item_str = \"\"\n\n            if self.is_op_cli_v2:\n                item_str = output\n            else:\n                item_str = RoyalUtils.get_last_line(output)\n            \n            item = json.loads(item_str)\n        \n            return item\n        else:\n            if not err:\n                err = self.unknown_error_string\n            else:\n                err = RoyalUtils.decode_to_utf8_string(err)\n            \n            raise Exception(err)\n\nclass Converter:\n    @staticmethod\n    def get_vault_name(vaults, vault_id, is_op_cli_v2):\n        for vault in vaults:\n            if is_op_cli_v2:\n                if vault.get(\"id\", \"\") == vault_id:\n                    return vault.get(\"name\", \"\")\n            else:\n                if vault.get(\"uuid\", \"\") == vault_id:\n                    return vault.get(\"name\", \"\")\n        \n        return \"\"\n\n    @staticmethod\n    def convert_items(vaults, items, is_op_cli_v2):\n        objects = []\n\n        for item in items:\n            overview = None\n\n            if is_op_cli_v2:\n                overview = item\n            else:\n                overview = item.get(\"overview\", None)\n\n            if overview == None:\n                continue\n\n            id = \"\"\n\n            if is_op_cli_v2:\n                id = item.get(\"id\", \"\")\n            else:\n                id = item.get(\"uuid\", \"\")\n            \n            title = overview.get(\"title\", \"N/A\")\n            url = overview.get(\"url\", \"\")\n\n            vault_id = \"\"\n\n            if is_op_cli_v2:\n                item_vault = item.get(\"vault\", None)\n\n                if item_vault:\n                    vault_id = item_vault.get(\"id\", \"\")\n            else:\n                vault_id = item.get(\"vaultUuid\", \"\")\n\n            vault_name = Converter.get_vault_name(vaults, vault_id, is_op_cli_v2)\n\n            cred = {\n                \"Type\": \"DynamicCredential\",\n                \"ID\": id,\n                \"Name\": title,\n                \"Path\": vault_name\n            }\n\n            if url != \"\":\n                cred[\"URL\"] = url\n\n            objects.append(cred)\n\n        objects = sorted(objects, key = lambda i: (i[\"Path\"], i[\"Name\"]))\n\n        store = {\n            \"Objects\": objects\n        }\n\n        return store\n    \n    @staticmethod\n    def convert_item(item_details, is_op_cli_v2):\n        username = None\n        password = None\n        private_key = None\n\n        if is_op_cli_v2:\n            fields = item_details.get(\"fields\")\n\n            if not fields:\n                fields = item_details\n\n            for field in fields:\n                field_id = field.get(\"id\", None)\n                field_label = field.get(\"label\", None)\n                field_value = field.get(\"value\", None)\n\n                if field_id == \"username\" or field_label == \"username\":\n                    username = field_value\n                elif field_id == \"password\" or field_label == \"password\":\n                    password = field_value\n                elif field_id == \"private_key\" or field_label == \"private key\":\n                    private_key = field_value\n        else:\n            username = item_details.get(\"username\", None)\n            password = item_details.get(\"password\", None)\n\n        cred = { }\n\n        if username is not None:\n            cred[\"Username\"] = username\n\n        if password is not None:\n            cred[\"Password\"] = password\n\n        if private_key is not None:\n            cred[\"KeyFileContent\"] = private_key\n\n        return cred\n\nclass Coordinator:\n    op_path = \"\"\n    sign_in_address = \"\"\n    email_address = \"\"\n    secret_key = \"\"\n    master_password = \"\"\n\n    error_message_sign_in = \"Error while signing in: \"\n    error_message_sign_out = \"Error while signing out: \"\n    error_message_get_vaults = \"Error while getting vaults: \"\n    error_message_get_items = \"Error while getting items: \"\n    error_message_get_item_details = \"Error while getting item details: \"\n\n    def __init__(self, op_path_windows, op_path_macOS, sign_in_address, email_address, secret_key, master_password):\n        self.op_path = op_path_macOS if RoyalUtils.is_macOS() else op_path_windows\n        self.sign_in_address = sign_in_address\n        self.email_address = email_address\n        self.secret_key = secret_key\n        self.master_password = master_password\n        \n    def get_items(self):\n        op = OnePassword(self.op_path)\n\n        try:\n            op.sign_out()\n        except Exception:\n            pass\n\n        try:\n            op.sign_in(self.sign_in_address, self.email_address, self.secret_key, self.master_password)\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_sign_in, e)\n\n        vaults = None\n\n        try:\n            vaults = op.get_vaults()\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_get_vaults, e)\n        \n        items = None\n\n        try:\n            items = op.get_items()\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_get_items, e)\n\n        try:\n            op.sign_out()\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_sign_out, e)\n\n        store = Converter.convert_items(vaults, items, op.is_op_cli_v2)\n        store_json = RoyalUtils.to_json(store, True)\n\n        print(store_json)\n    \n    def get_item_details(self, item_id):\n        op = OnePassword(self.op_path)\n\n        try:\n            op.sign_out()\n        except Exception:\n            pass\n\n        try:\n            op.sign_in(self.sign_in_address, self.email_address, self.secret_key, self.master_password)\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_sign_in, e)\n\n        item_details = None\n\n        try:\n            item_details = op.get_item_details(item_id)\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_get_item_details, e)\n\n        try:\n            op.sign_out()\n        except Exception as e:\n            RoyalUtils.exit_with_error(self.error_message_sign_out, e)\n\n        store = Converter.convert_item(item_details, op.is_op_cli_v2)\n        store_json = RoyalUtils.to_json(store, True)\n\n        print(store_json)\n\ncoordinator = Coordinator(op_path_windows, op_path_macOS, sign_in_address, email_address, secret_key, master_password)\n# coordinator.get_items()\ncoordinator.get_item_details(item_id)"
    }
  ]
}
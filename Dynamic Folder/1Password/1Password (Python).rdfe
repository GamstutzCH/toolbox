{
  "Name": "Dynamic Folder Export",
  "Objects": [
    {
      "Type": "DynamicFolder",
      "Name": "1Password (Python)",
      "Description": "This Dynamic Folder sample allows you to import dynamic credentials from 1Password.",
      "Notes": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title></title>\n<style type=\"text/css\">.cs4F0CA83{text-align:left;text-indent:0pt;margin:0pt 0pt 0pt 0pt}\n\t\t\t.cs4480B777{color:#000000;background-color:transparent;font-family:Arial;font-size:16pt;font-weight:bold;font-style:normal;}\n\t\t\t.cs4A7471C4{text-align:left;text-indent:0pt;margin:12pt 0pt 12pt 0pt}\n\t\t\t.cs70680EAF{color:#000000;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:bold;font-style:normal;}\n\t\t\t.cs3FB5A5BA{color:#000000;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:normal;font-style:normal;}\n\t\t\t.csC76C7D68{color:#000000;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:normal;font-style:normal;text-decoration: none;}\n\t\t\t.csEEB8B155{color:#0000FF;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:normal;font-style:normal;text-decoration: underline;}\n\t\t\t.cs48D9DD3F{color:#000000;background-color:transparent;font-family:Arial;font-size:14pt;font-weight:bold;font-style:normal;}\n\t\t\t.csA0C0EFA3{text-align:left;margin:0pt 0pt 0pt 0pt;list-style-type:disc;color:#000000;background-color:transparent;font-family:Arial;font-size:11pt;font-weight:normal;font-style:normal}\n\t\t\t.cs8A075B43{text-align:left;text-indent:-18pt;margin:0pt 0pt 0pt 36pt}\n\t\t\t.csEA39B13A{color:#000000;background-color:transparent;font-family:Arial;font-size:12pt;font-weight:normal;font-style:normal;}\n</style>\n<h2 class=\"cs4F0CA83\"><span class=\"cs4480B777\">1Password Dynamic Folder sample</span></h2>\n\n<p class=\"cs4A7471C4\"><span class=\"cs70680EAF\">Version</span><span class=\"cs3FB5A5BA\">: 1.0.2</span><br />\n<span class=\"cs70680EAF\">Author</span><span class=\"cs3FB5A5BA\">: Royal Apps</span></p>\n\n<p class=\"cs4A7471C4\"><span class=\"cs3FB5A5BA\">This Dynamic Folder sample allows you to import credentials from 1Password. The <a class=\"csC76C7D68\" href=\"https://support.1password.com/command-line-getting-started/\"><span class=\"csEEB8B155\">1Password command-line tool</span></a></span><span class=\"cs3FB5A5BA\"> is required and the path where it is installed must be configured in the &quot;Custom Properties&quot; section. Also, your 1Password login details must be provided in the &quot;Login&quot; section of the custom properties.</span></p>\n\n<p class=\"cs4A7471C4\"><span class=\"cs3FB5A5BA\">At the moment, items of all vaults are imported as Dynamic Credentials. This means that the username and password fields will remain empty after reloading the dynamic folder and only be requested when a connection is established that uses one of the credentials of this dynamic folder.</span></p>\n\n<p class=\"cs4A7471C4\"><span class=\"cs48D9DD3F\">Limitations</span></p>\n\n<p class=\"cs4A7471C4\"><span class=\"cs3FB5A5BA\">Currently, there&#39;s </span><span class=\"cs70680EAF\">no support</span><span class=\"cs3FB5A5BA\"> for multi-factor-authentication.<br />\nThe script has only been tested with </span><span class=\"cs70680EAF\">Python 3</span><span class=\"cs3FB5A5BA\">.</span></p>\n\n<h3 class=\"cs4F0CA83\"><span class=\"cs48D9DD3F\">Requirements</span></h3>\n\n<ul style=\"margin-top:0;margin-bottom:0;\">\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\"><a class=\"csC76C7D68\" href=\"https://support.1password.com/command-line-getting-started/\"><span class=\"csEEB8B155\">1Password command-line tool</span></a></span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: __future__</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: sys</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: functools</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: json</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module:&nbsp;subprocess</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: sys</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: os</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Python Module: base64</span></li>\n</ul>\n\n<p class=\"cs8A075B43\"><span class=\"csEA39B13A\">&nbsp;</span></p>\n\n<h3 class=\"cs4F0CA83\"><span class=\"cs48D9DD3F\">Setup</span></h3>\n\n<ul style=\"margin-top:0;margin-bottom:0;\">\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Specify the full, absolute path to the 1Password command-line tool&nbsp;in the &quot;Custom Properties&quot; section.</span></li>\n\t<li class=\"csA0C0EFA3\"><span class=\"cs3FB5A5BA\">Specify your login details for accessing your 1Password account in the &quot;Login&quot; section of the &quot;Custom Properties&quot;.</span></li>\n</ul>\n",
      "CustomProperties": [
        {
          "Name": "Command Line Tool Configuration",
          "Type": "Header",
          "Value": ""
        },
        {
          "Name": "OP Path (Windows)",
          "Type": "Text",
          "Value": "C:\\Program Files\\op.exe"
        },
        {
          "Name": "OP Path (macOS)",
          "Type": "Text",
          "Value": "/usr/local/bin/op"
        },
        {
          "Name": "Login",
          "Type": "Header",
          "Value": ""
        },
        {
          "Name": "Sign In Address",
          "Type": "URL",
          "Value": "my.1password.com"
        },
        {
          "Name": "Email Address",
          "Type": "Email",
          "Value": "TODO"
        },
        {
          "Name": "Secret Key",
          "Type": "Protected",
          "Value": "TODO"
        },
        {
          "Name": "Master Password",
          "Type": "Protected",
          "Value": "TODO"
        }
      ],
      "Script": "from __future__ import print_function\nfrom functools import partial\nfrom sys import platform as _platform\n\nimport sys\nimport json\nimport subprocess\nimport os\nimport base64\n\nop_path_windows = r\"$CustomProperty.OPPathWindows$\"\nop_path_macOS = r\"$CustomProperty.OPPathmacOS$\"\nsign_in_address = r\"$CustomProperty.SignInAddress$\"\nemail_address = r\"$CustomProperty.EmailAddress$\"\nsecret_key = r\"$CustomProperty.SecretKey$\"\nmaster_password = r\"$CustomProperty.MasterPassword$\"\n# item_id = r\"$DynamicCredential.EffectiveID$\"\n\nclass Utils:\n\t@staticmethod\n\tdef is_macOS():\n\t\treturn _platform.lower().startswith(\"darwin\")\n\n\t@staticmethod\n\tdef exit_with_error(message, exception=None):\n\t\tprintError = partial(print, file=sys.stderr) # python2 compatibility\n\n\t\texception_message = str(exception) if exception else \"N/A\"\n\n\t\tfull_message = message + exception_message\n\n\t\tprintError(full_message)\n\t\tsys.exit(1)\n\n\t@staticmethod\n\tdef to_json(obj, pretty=False):\n\t\treturn json.dumps(obj, indent=4) if pretty else json.dumps(obj)\n\t\n\t@staticmethod\n\tdef random_uuid():\n\t\tuuid = base64.b32encode(os.urandom(16)).decode().lower().rstrip(\"=\")\n\n\t\treturn uuid\n\t\n\t@staticmethod\n\tdef get_last_line(str):\n\t\tstripped_str = str.strip()\n\n\t\tif \"\\n\" in stripped_str:\n\t\t\tlines = stripped_str.splitlines()\n\t\t\tstripped_str = lines[len(lines) - 1]\n\n\t\treturn stripped_str\n\nclass OnePassword:\n\tconfig_path = \"\"\n\tconfig_file_path = \"\"\n\n\top_path = \"\"\n\tsession_token = \"\"\n\taccount_shorthand = \"\"\n\n\tunknown_error_string = \"An unknown error occurred.\"\n\n\tdef __init__(self, op_path):\n\t\tself.config_path = os.path.expanduser(\"~/.config/op\")\n\t\tself.config_file_path = os.path.join(self.config_path, \"config\")\n\n\t\tself.op_path = op_path\n\t\n\tdef get_device_id(self):\n\t\tdevice_id = os.environ.get(\"OP_DEVICE\")\n\n\t\treturn device_id\n\t\n\tdef set_device_id(self, device_id):\n\t\tos.environ[\"OP_DEVICE\"] = device_id\n\n\t\tif not os.path.exists(self.config_file_path):\n\t\t\tconfig_json = Utils.to_json({ \"device\": device_id }, True)\n\n\t\t\ttry:\n\t\t\t\tfile = open(self.config_file_path, \"w\")\n\n\t\t\t\tfile.write(config_json)\n\t\t\t\tfile.close()\n\n\t\t\t\tif Utils.is_macOS:\n\t\t\t\t\tos.chmod(self.config_file_path, 0o600)\n\t\t\t\t\n\t\t\t\treturn True\n\t\t\texcept:\n\t\t\t\treturn False\n\t\t\n\t\treturn True\n\t\n\tdef get_account_shorthand(self, sign_in_address, email_address):\n\t\tshorthand = sign_in_address.replace(\".\", \"_\") + \"__\" + email_address.replace(\".\", \"_\").replace(\"@\", \"_\").replace(\"+\", \"_\")\n\n\t\treturn shorthand\n\n\tdef sign_out(self):\n\t\tcmd_signout = [ ]\n\n\t\tif self.account_shorthand:\n\t\t\tcmd_signout = [ self.op_path, \"signout\", \"--account\", self.account_shorthand ]\n\t\telse:\n\t\t\tcmd_signout = [ self.op_path, \"signout\" ]\n\n\t\top = subprocess.Popen(cmd_signout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\t\t\n\t\t(output, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\tself.session_token = \"\"\n\t\t\tself.account_shorthand = \"\"\n\t\telse:\n\t\t\tif not err:\n\t\t\t\terr = self.unknown_error_string\n\t\t\telse:\n\t\t\t\terr = err.decode('utf-8')\n\n\t\t\traise Exception(err)\n\t\n\tdef sign_in(self, sign_in_address, email_address, secret_key, master_password, second_try=False):\n\t\tshorthand = self.get_account_shorthand(sign_in_address, email_address)\n\n\t\tcmd_signin = [ self.op_path, \"signin\", sign_in_address, email_address, secret_key, \"--shorthand\", shorthand, \"--raw\" ]\n\t\top = subprocess.Popen(cmd_signin, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n\n\t\tencoded_master_password = (master_password + \"\\n\").encode(\"utf-8\")\n\n\t\t(output, err) = op.communicate(encoded_master_password)\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\toutput = output.decode('utf-8')\n\n\t\t\tself.session_token = Utils.get_last_line(output)\n\t\t\tself.account_shorthand = shorthand\n\t\telse:\n\t\t\terr = err.decode('utf-8') if err is not None else \"\"\n\n\t\t\tif not second_try:\n\t\t\t\tif \"No saved device ID\" in err:\n\t\t\t\t\texport_start_str = \"export OP_DEVICE=\"\n\t\t\t\t\tdevice_id = \"\"\n\n\t\t\t\t\tif export_start_str in err:\n\t\t\t\t\t\tstart_index = err.index(export_start_str) + len(export_start_str)\n\t\t\t\t\t\tdevice_id = err[start_index:]\n\t\t\t\t\t\tend_index = device_id.index(\"`\")\n\t\t\t\t\t\tdevice_id = device_id[:end_index]\n\n\t\t\t\t\tif not device_id or len(device_id) != 26:\n\t\t\t\t\t\tdevice_id = Utils.random_uuid()\n\n\t\t\t\t\tself.set_device_id(device_id)\n\n\t\t\t\t\tself.sign_in(sign_in_address, email_address, secret_key, master_password, second_try=True)\n\n\t\t\t\t\treturn\n\t\t\t\n\t\t\tif not err:\n\t\t\t\terr = self.unknown_error_string\n\n\t\t\traise Exception(err)\n\n\tdef get_vaults(self):\n\t\tcmd_list_vaults = [ self.op_path, \"list\", \"vaults\", \"--account\", self.account_shorthand, \"--session\", self.session_token ]\n\t\top = subprocess.Popen(cmd_list_vaults, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n\t\t(output, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\toutput = output.decode('utf-8')\n\n\t\t\tvaults_str = Utils.get_last_line(output)\n\t\t\tvaults = json.loads(vaults_str)\n\n\t\t\treturn vaults\n\t\t\n\t\tif not err:\n\t\t\terr = self.unknown_error_string\n\t\telse:\n\t\t\terr = err.decode('utf-8')\n\t\t\n\t\traise Exception(err)\n\n\tdef get_items(self):\n\t\tcmd_list_items = [ self.op_path, \"list\", \"items\", \"--account\", self.account_shorthand, \"--session\", self.session_token ]\n\t\top = subprocess.Popen(cmd_list_items, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n\t\t(output, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\toutput = output.decode('utf-8')\n\t\t\titems_str = Utils.get_last_line(output)\n\t\t\titems = json.loads(items_str)\n\t\t\n\t\t\treturn items\n\t\telse:\n\t\t\tif not err:\n\t\t\t\terr = self.unknown_error_string\n\t\t\telse:\n\t\t\t\terr = err.decode('utf-8')\n\t\t\n\t\t\traise Exception(err)\n\n\tdef get_item_details(self, item_id):\n\t\tcmd_get_item = [ self.op_path, \"get\", \"item\", item_id, \"--fields\", \"username,password\", \"--format\", \"JSON\", \"--account\", self.account_shorthand, \"--session\", self.session_token ]\n\n\t\top = subprocess.Popen(cmd_get_item, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n\t\t(output, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\toutput = output.decode('utf-8')\n\n\t\t\titem_str = Utils.get_last_line(output)\n\t\t\titem = json.loads(item_str)\n\t\t\n\t\t\treturn item\n\t\telse:\n\t\t\tif not err:\n\t\t\t\terr = self.unknown_error_string\n\t\t\telse:\n\t\t\t\terr = err.decode('utf-8')\n\t\t\t\n\t\t\traise Exception(err)\n\nclass Converter:\n\t@staticmethod\n\tdef get_vault_name(vaults, vault_id):\n\t\tfor vault in vaults:\n\t\t\tif vault.get(\"uuid\", \"\") == vault_id:\n\t\t\t\treturn vault.get(\"name\", \"\")\n\t\t\n\t\treturn \"\"\n\n\t@staticmethod\n\tdef convert_items(vaults, items):\n\t\tobjects = []\n\n\t\tfor item in items:\n\t\t\toverview = item.get(\"overview\", None)\n\n\t\t\tif overview == None:\n\t\t\t\tcontinue\n\n\t\t\tid = item.get(\"uuid\", \"\")\n\t\t\ttitle = overview.get(\"title\", \"N/A\")\n\t\t\turl = overview.get(\"url\", \"\")\n\n\t\t\tvault_id = item.get(\"vaultUuid\", \"\")\n\t\t\tvault_name = Converter.get_vault_name(vaults, vault_id)\n\n\t\t\tcred = {\n\t\t\t\t\"Type\": \"DynamicCredential\",\n\t\t\t\t\"ID\": id,\n\t\t\t\t\"Name\": title,\n\t\t\t\t\"Path\": vault_name\n\t\t\t}\n\n\t\t\tif url != \"\":\n\t\t\t\tcred[\"URL\"] = url\n\n\t\t\tobjects.append(cred)\n\n\t\tobjects = sorted(objects, key = lambda i: (i[\"Path\"], i[\"Name\"]))\n\n\t\tstore = {\n\t\t\t\"Objects\": objects\n\t\t}\n\n\t\treturn store\n\t\n\t@staticmethod\n\tdef convert_item(item_details):\n\t\tusername = item_details.get(\"username\", None)\n\t\tpassword = item_details.get(\"password\", None)\n\n\t\tcred = { }\n\n\t\tif username is not None:\n\t\t\tcred[\"Username\"] = username\n\n\t\tif password is not None:\n\t\t\tcred[\"Password\"] = password\n\n\t\treturn cred\n\nclass Coordinator:\n\top_path = \"\"\n\tsign_in_address = \"\"\n\temail_address = \"\"\n\tsecret_key = \"\"\n\tmaster_password = \"\"\n\n\terror_message_sign_in = \"Error while signing in: \"\n\terror_message_sign_out = \"Error while signing out: \"\n\terror_message_get_vaults = \"Error while getting vaults: \"\n\terror_message_get_items = \"Error while getting items: \"\n\terror_message_get_item_details = \"Error while getting item details: \"\n\n\tdef __init__(self, op_path_windows, op_path_macOS, sign_in_address, email_address, secret_key, master_password):\n\t\tself.op_path = op_path_macOS if Utils.is_macOS() else op_path_windows\n\t\tself.sign_in_address = sign_in_address\n\t\tself.email_address = email_address\n\t\tself.secret_key = secret_key\n\t\tself.master_password = master_password\n\t\t\n\tdef get_items(self):\n\t\top = OnePassword(self.op_path)\n\n\t\ttry:\n\t\t\top.sign_out()\n\t\texcept Exception:\n\t\t\tpass\n\n\t\ttry:\n\t\t\top.sign_in(self.sign_in_address, self.email_address, self.secret_key, self.master_password)\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_sign_in, e)\n\n\t\tvaults = None\n\n\t\ttry:\n\t\t\tvaults = op.get_vaults()\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_get_vaults, e)\n\t\t\n\t\titems = None\n\n\t\ttry:\n\t\t\titems = op.get_items()\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_get_items, e)\n\n\t\ttry:\n\t\t\top.sign_out()\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_sign_out, e)\n\n\t\tstore = Converter.convert_items(vaults, items)\n\t\tstore_json = Utils.to_json(store, True)\n\n\t\tprint(store_json)\n\t\n\tdef get_item_details(self, item_id):\n\t\top = OnePassword(self.op_path)\n\n\t\ttry:\n\t\t\top.sign_out()\n\t\texcept Exception:\n\t\t\tpass\n\n\t\ttry:\n\t\t\top.sign_in(self.sign_in_address, self.email_address, self.secret_key, self.master_password)\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_sign_in, e)\n\n\t\titem_details = None\n\n\t\ttry:\n\t\t\titem_details = op.get_item_details(item_id)\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_get_item_details, e)\n\n\t\ttry:\n\t\t\top.sign_out()\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_sign_out, e)\n\n\t\tstore = Converter.convert_item(item_details)\n\t\tstore_json = Utils.to_json(store, True)\n\n\t\tprint(store_json)\n\ncoordinator = Coordinator(op_path_windows, op_path_macOS, sign_in_address, email_address, secret_key, master_password)\ncoordinator.get_items()\n# coordinator.get_item_details(item_id)",
      "ScriptInterpreter": "python",
      "DynamicCredentialScriptInterpreter": "python",
      "DynamicCredentialScript": "from __future__ import print_function\nfrom functools import partial\nfrom sys import platform as _platform\n\nimport sys\nimport json\nimport subprocess\nimport os\nimport base64\n\nop_path_windows = r\"$CustomProperty.OPPathWindows$\"\nop_path_macOS = r\"$CustomProperty.OPPathmacOS$\"\nsign_in_address = r\"$CustomProperty.SignInAddress$\"\nemail_address = r\"$CustomProperty.EmailAddress$\"\nsecret_key = r\"$CustomProperty.SecretKey$\"\nmaster_password = r\"$CustomProperty.MasterPassword$\"\nitem_id = r\"$DynamicCredential.EffectiveID$\"\n\nclass Utils:\n\t@staticmethod\n\tdef is_macOS():\n\t\treturn _platform.lower().startswith(\"darwin\")\n\n\t@staticmethod\n\tdef exit_with_error(message, exception=None):\n\t\tprintError = partial(print, file=sys.stderr) # python2 compatibility\n\n\t\texception_message = str(exception) if exception else \"N/A\"\n\n\t\tfull_message = message + exception_message\n\n\t\tprintError(full_message)\n\t\tsys.exit(1)\n\n\t@staticmethod\n\tdef to_json(obj, pretty=False):\n\t\treturn json.dumps(obj, indent=4) if pretty else json.dumps(obj)\n\t\n\t@staticmethod\n\tdef random_uuid():\n\t\tuuid = base64.b32encode(os.urandom(16)).decode().lower().rstrip(\"=\")\n\n\t\treturn uuid\n\t\n\t@staticmethod\n\tdef get_last_line(str):\n\t\tstripped_str = str.strip()\n\n\t\tif \"\\n\" in stripped_str:\n\t\t\tlines = stripped_str.splitlines()\n\t\t\tstripped_str = lines[len(lines) - 1]\n\n\t\treturn stripped_str\n\nclass OnePassword:\n\tconfig_path = \"\"\n\tconfig_file_path = \"\"\n\n\top_path = \"\"\n\tsession_token = \"\"\n\taccount_shorthand = \"\"\n\n\tunknown_error_string = \"An unknown error occurred.\"\n\n\tdef __init__(self, op_path):\n\t\tself.config_path = os.path.expanduser(\"~/.config/op\")\n\t\tself.config_file_path = os.path.join(self.config_path, \"config\")\n\n\t\tself.op_path = op_path\n\t\n\tdef get_device_id(self):\n\t\tdevice_id = os.environ.get(\"OP_DEVICE\")\n\n\t\treturn device_id\n\t\n\tdef set_device_id(self, device_id):\n\t\tos.environ[\"OP_DEVICE\"] = device_id\n\n\t\tif not os.path.exists(self.config_file_path):\n\t\t\tconfig_json = Utils.to_json({ \"device\": device_id }, True)\n\n\t\t\ttry:\n\t\t\t\tfile = open(self.config_file_path, \"w\")\n\n\t\t\t\tfile.write(config_json)\n\t\t\t\tfile.close()\n\n\t\t\t\tif Utils.is_macOS:\n\t\t\t\t\tos.chmod(self.config_file_path, 0o600)\n\t\t\t\t\n\t\t\t\treturn True\n\t\t\texcept:\n\t\t\t\treturn False\n\t\t\n\t\treturn True\n\t\n\tdef get_account_shorthand(self, sign_in_address, email_address):\n\t\tshorthand = sign_in_address.replace(\".\", \"_\") + \"__\" + email_address.replace(\".\", \"_\").replace(\"@\", \"_\").replace(\"+\", \"_\")\n\n\t\treturn shorthand\n\n\tdef sign_out(self):\n\t\tcmd_signout = [ ]\n\n\t\tif self.account_shorthand:\n\t\t\tcmd_signout = [ self.op_path, \"signout\", \"--account\", self.account_shorthand ]\n\t\telse:\n\t\t\tcmd_signout = [ self.op_path, \"signout\" ]\n\n\t\top = subprocess.Popen(cmd_signout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\t\t\n\t\t(output, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\tself.session_token = \"\"\n\t\t\tself.account_shorthand = \"\"\n\t\telse:\n\t\t\tif not err:\n\t\t\t\terr = self.unknown_error_string\n\t\t\telse:\n\t\t\t\terr = err.decode('utf-8')\n\n\t\t\traise Exception(err)\n\t\n\tdef sign_in(self, sign_in_address, email_address, secret_key, master_password, second_try=False):\n\t\tshorthand = self.get_account_shorthand(sign_in_address, email_address)\n\n\t\tcmd_signin = [ self.op_path, \"signin\", sign_in_address, email_address, secret_key, \"--shorthand\", shorthand, \"--raw\" ]\n\t\top = subprocess.Popen(cmd_signin, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n\n\t\tencoded_master_password = (master_password + \"\\n\").encode(\"utf-8\")\n\n\t\t(output, err) = op.communicate(encoded_master_password)\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\toutput = output.decode('utf-8')\n\n\t\t\tself.session_token = Utils.get_last_line(output)\n\t\t\tself.account_shorthand = shorthand\n\t\telse:\n\t\t\terr = err.decode('utf-8') if err is not None else \"\"\n\n\t\t\tif not second_try:\n\t\t\t\tif \"No saved device ID\" in err:\n\t\t\t\t\texport_start_str = \"export OP_DEVICE=\"\n\t\t\t\t\tdevice_id = \"\"\n\n\t\t\t\t\tif export_start_str in err:\n\t\t\t\t\t\tstart_index = err.index(export_start_str) + len(export_start_str)\n\t\t\t\t\t\tdevice_id = err[start_index:]\n\t\t\t\t\t\tend_index = device_id.index(\"`\")\n\t\t\t\t\t\tdevice_id = device_id[:end_index]\n\n\t\t\t\t\tif not device_id or len(device_id) != 26:\n\t\t\t\t\t\tdevice_id = Utils.random_uuid()\n\n\t\t\t\t\tself.set_device_id(device_id)\n\n\t\t\t\t\tself.sign_in(sign_in_address, email_address, secret_key, master_password, second_try=True)\n\n\t\t\t\t\treturn\n\t\t\t\n\t\t\tif not err:\n\t\t\t\terr = self.unknown_error_string\n\n\t\t\traise Exception(err)\n\n\tdef get_vaults(self):\n\t\tcmd_list_vaults = [ self.op_path, \"list\", \"vaults\", \"--account\", self.account_shorthand, \"--session\", self.session_token ]\n\t\top = subprocess.Popen(cmd_list_vaults, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n\t\t(output, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\toutput = output.decode('utf-8')\n\n\t\t\tvaults_str = Utils.get_last_line(output)\n\t\t\tvaults = json.loads(vaults_str)\n\n\t\t\treturn vaults\n\t\t\n\t\tif not err:\n\t\t\terr = self.unknown_error_string\n\t\telse:\n\t\t\terr = err.decode('utf-8')\n\t\t\n\t\traise Exception(err)\n\n\tdef get_items(self):\n\t\tcmd_list_items = [ self.op_path, \"list\", \"items\", \"--account\", self.account_shorthand, \"--session\", self.session_token ]\n\t\top = subprocess.Popen(cmd_list_items, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n\t\t(output, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\toutput = output.decode('utf-8')\n\t\t\titems_str = Utils.get_last_line(output)\n\t\t\titems = json.loads(items_str)\n\t\t\n\t\t\treturn items\n\t\telse:\n\t\t\tif not err:\n\t\t\t\terr = self.unknown_error_string\n\t\t\telse:\n\t\t\t\terr = err.decode('utf-8')\n\t\t\n\t\t\traise Exception(err)\n\n\tdef get_item_details(self, item_id):\n\t\tcmd_get_item = [ self.op_path, \"get\", \"item\", item_id, \"--fields\", \"username,password\", \"--format\", \"JSON\", \"--account\", self.account_shorthand, \"--session\", self.session_token ]\n\n\t\top = subprocess.Popen(cmd_get_item, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n\t\t(output, err) = op.communicate()\n\t\texit_code = op.wait()\n\n\t\tsuccess = exit_code == 0\n\n\t\tif success:\n\t\t\toutput = output.decode('utf-8')\n\n\t\t\titem_str = Utils.get_last_line(output)\n\t\t\titem = json.loads(item_str)\n\t\t\n\t\t\treturn item\n\t\telse:\n\t\t\tif not err:\n\t\t\t\terr = self.unknown_error_string\n\t\t\telse:\n\t\t\t\terr = err.decode('utf-8')\n\t\t\t\n\t\t\traise Exception(err)\n\nclass Converter:\n\t@staticmethod\n\tdef get_vault_name(vaults, vault_id):\n\t\tfor vault in vaults:\n\t\t\tif vault.get(\"uuid\", \"\") == vault_id:\n\t\t\t\treturn vault.get(\"name\", \"\")\n\t\t\n\t\treturn \"\"\n\n\t@staticmethod\n\tdef convert_items(vaults, items):\n\t\tobjects = []\n\n\t\tfor item in items:\n\t\t\toverview = item.get(\"overview\", None)\n\n\t\t\tif overview == None:\n\t\t\t\tcontinue\n\n\t\t\tid = item.get(\"uuid\", \"\")\n\t\t\ttitle = overview.get(\"title\", \"N/A\")\n\t\t\turl = overview.get(\"url\", \"\")\n\n\t\t\tvault_id = item.get(\"vaultUuid\", \"\")\n\t\t\tvault_name = Converter.get_vault_name(vaults, vault_id)\n\n\t\t\tcred = {\n\t\t\t\t\"Type\": \"DynamicCredential\",\n\t\t\t\t\"ID\": id,\n\t\t\t\t\"Name\": title,\n\t\t\t\t\"Path\": vault_name\n\t\t\t}\n\n\t\t\tif url != \"\":\n\t\t\t\tcred[\"URL\"] = url\n\n\t\t\tobjects.append(cred)\n\n\t\tobjects = sorted(objects, key = lambda i: (i[\"Path\"], i[\"Name\"]))\n\n\t\tstore = {\n\t\t\t\"Objects\": objects\n\t\t}\n\n\t\treturn store\n\t\n\t@staticmethod\n\tdef convert_item(item_details):\n\t\tusername = item_details.get(\"username\", None)\n\t\tpassword = item_details.get(\"password\", None)\n\n\t\tcred = { }\n\n\t\tif username is not None:\n\t\t\tcred[\"Username\"] = username\n\n\t\tif password is not None:\n\t\t\tcred[\"Password\"] = password\n\n\t\treturn cred\n\nclass Coordinator:\n\top_path = \"\"\n\tsign_in_address = \"\"\n\temail_address = \"\"\n\tsecret_key = \"\"\n\tmaster_password = \"\"\n\n\terror_message_sign_in = \"Error while signing in: \"\n\terror_message_sign_out = \"Error while signing out: \"\n\terror_message_get_vaults = \"Error while getting vaults: \"\n\terror_message_get_items = \"Error while getting items: \"\n\terror_message_get_item_details = \"Error while getting item details: \"\n\n\tdef __init__(self, op_path_windows, op_path_macOS, sign_in_address, email_address, secret_key, master_password):\n\t\tself.op_path = op_path_macOS if Utils.is_macOS() else op_path_windows\n\t\tself.sign_in_address = sign_in_address\n\t\tself.email_address = email_address\n\t\tself.secret_key = secret_key\n\t\tself.master_password = master_password\n\t\t\n\tdef get_items(self):\n\t\top = OnePassword(self.op_path)\n\n\t\ttry:\n\t\t\top.sign_out()\n\t\texcept Exception:\n\t\t\tpass\n\n\t\ttry:\n\t\t\top.sign_in(self.sign_in_address, self.email_address, self.secret_key, self.master_password)\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_sign_in, e)\n\n\t\tvaults = None\n\n\t\ttry:\n\t\t\tvaults = op.get_vaults()\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_get_vaults, e)\n\t\t\n\t\titems = None\n\n\t\ttry:\n\t\t\titems = op.get_items()\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_get_items, e)\n\n\t\ttry:\n\t\t\top.sign_out()\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_sign_out, e)\n\n\t\tstore = Converter.convert_items(vaults, items)\n\t\tstore_json = Utils.to_json(store, True)\n\n\t\tprint(store_json)\n\t\n\tdef get_item_details(self, item_id):\n\t\top = OnePassword(self.op_path)\n\n\t\ttry:\n\t\t\top.sign_out()\n\t\texcept Exception:\n\t\t\tpass\n\n\t\ttry:\n\t\t\top.sign_in(self.sign_in_address, self.email_address, self.secret_key, self.master_password)\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_sign_in, e)\n\n\t\titem_details = None\n\n\t\ttry:\n\t\t\titem_details = op.get_item_details(item_id)\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_get_item_details, e)\n\n\t\ttry:\n\t\t\top.sign_out()\n\t\texcept Exception as e:\n\t\t\tUtils.exit_with_error(self.error_message_sign_out, e)\n\n\t\tstore = Converter.convert_item(item_details)\n\t\tstore_json = Utils.to_json(store, True)\n\n\t\tprint(store_json)\n\ncoordinator = Coordinator(op_path_windows, op_path_macOS, sign_in_address, email_address, secret_key, master_password)\n# coordinator.get_items()\ncoordinator.get_item_details(item_id)"
    }
  ]
}
{
  "Name": "Dynamic Folder Export",
  "Objects": [
    {
      "Type": "DynamicFolder",
      "Name": "Bitwarden (Python)",
      "Description": "This Dynamic Folder sample allows you to import credentials from Bitwarden.",
      "Notes": "<h2><strong>Bitwarden Dynamic Folder sample</strong></h2>\n\n<p><strong>Version</strong>: 1.0.4<br />\n<strong>Author</strong>: Royal Applications</p>\n\n<p>This Dynamic Folder sample allows you to import credentials from Bitwarden. The Bitwarden CLI client is required and the path where it is installed must be configured in the &quot;Custom Properties&quot; section. Also, your Bitwarden login details must be provided in the &quot;Credentials&quot; section.</p>\n\n<p>At the moment, all items are placed in the root folder. There is no support for custom folders at the moment. Bitwarden two-step login is supported, but only tested with the &quot;Authenticator App&quot; and &quot;Email&quot; providers.</p>\n\n<h3><strong>Requirements</strong></h3>\n\n<ul>\n\t<li><a href=\"https://help.bitwarden.com/article/cli\">Bitwarden command-line tool (CLI)</a></li>\n\t<li>Python Module: __future__</li>\n\t<li>Python Module: sys</li>\n\t<li>Python Module: functools</li>\n\t<li>Python Module: json</li>\n\t<li>Python Module:&nbsp;subprocess</li>\n\t<li>Python Module: os</li>\n\t<li>Python Module: tkinter</li>\n</ul>\n\n<h3><strong>Setup</strong></h3>\n\n<ul>\n\t<li>Specify the full, absolute path to the Bitwarden CLI tool in the &quot;Custom Properties&quot; section.</li>\n\t<li>Specify credentials for accessing your Bitwarden vault in the &quot;Credentials&quot; section.</li>\n</ul>\n",
      "CustomProperties": [
        {
          "Name": "Path To BW CLI",
          "Type": "Text",
          "Value": "/Applications/bw"
        }
      ],
      "ScriptInterpreter": "python",
      "DynamicCredentialScriptInterpreter": "json",
      "DynamicCredentialScript": "{\n\t\"Username\": \"user\",\n\t\"Password\": \"pass\"\n}",
      "Script": "from __future__ import print_function\nimport sys\nfrom functools import partial\nimport json\nimport subprocess\nimport os\n\ntry:\n    # for Python2\n    from Tkinter import * \nexcept ImportError:\n    # for Python3\n    from tkinter import *\n\nclass TakeInput(object):\n    def __init__(self, request_message):\n        self.root = Tk()\n\n        self.root.title('')\n        self.string = ''\n\n        self.frame = Frame(self.root)\n        self.frame.pack()\n\n        self.acceptInput(request_message)\n\n    def acceptInput(self, request_message):\n        r = self.frame\n\n        k = Label(r, text=request_message)\n        k.pack(side='left')\n        self.e = Entry(r, text='Name')\n        self.e.pack(side='left')\n        self.e.focus_set()\n        b = Button(r, text='OK', command=self.gettext)\n        b.pack(side='right')\n\n    def gettext(self):\n        self.string = self.e.get()\n        self.root.destroy()\n\n    def getString(self):\n        return self.string\n\n    def waitForInput(self):\n        self.root.lift()\n        self.root.attributes('-topmost', True)\n        self.root.after_idle(self.root.attributes, '-topmost', False)\n\n        self.root.mainloop()\n\n\ndef show_prompt(request_message):\n    msg_box = TakeInput(request_message)\n\n    # loop until the user makes a decision and the window is destroyed\n\n    msg_box.waitForInput()\n\n    return msg_box.getString()\n\n\ndef convert_notes_to_html(notes):\n    if notes is None:\n        return \"\"\n    else:\n        return notes.replace(\"\\r\\n\", \"<br />\").replace(\"\\r\", \"<br />\").replace(\"\\n\", \"<br />\")\n\n\ndef create_credential(item):\n    item_id = item[\"id\"]\n    item_type = item[\"type\"]\n    item_name = item[\"name\"]\n    item_notes = convert_notes_to_html(item.get(\"notes\", \"\"))\n    item_favorite = item.get(\"favorite\", False)\n\n    item_login = item.get(\"login\", None)\n\n    item_username = \"\"\n    item_password = \"\"\n    item_url = \"\"\n\n    if item_login is not None:\n        item_username = item_login.get(\"username\", \"\")\n        item_password = item_login.get(\"password\", \"\")\n\n        item_uris = item_login.get(\"uris\", None)\n\n        if item_uris is not None:\n            for item_uri in item_login.get(\"uris\", None):\n                item_url = item_uri.get(\"uri\", \"\")\n    \n    item_fields = item.get(\"fields\", None)\n\n    item_custom_properties = [ ]\n\n    if item_type == 3: # Card\n        item_card = item.get(\"card\", None)\n\n        if item_card is not None:\n            card_brand = item_card.get(\"brand\", \"Credit Card\")\n            card_cardholdername = item_card.get(\"cardholderName\", None)\n            card_code = item_card.get(\"code\", None)\n            card_expiration_month = item_card.get(\"expMonth\", None)\n            card_expiration_year = item_card.get(\"expYear\", None)\n            card_number = item_card.get(\"number\", None)\n\n            item_custom_properties.append({\n                \"Type\": \"Header\",\n                \"Name\": card_brand\n            })\n\n            if card_cardholdername is not None:\n                item_custom_properties.append({\n                    \"Type\": \"Text\",\n                    \"Name\": \"Cardholder\",\n                    \"Value\": card_cardholdername\n                })\n\n            if card_number is not None:\n                item_custom_properties.append({\n                    \"Type\": \"Text\",\n                    \"Name\": \"Card Number\",\n                    \"Value\": card_number\n                })\n\n            if card_expiration_month is not None:\n                item_custom_properties.append({\n                    \"Type\": \"Text\",\n                    \"Name\": \"Expiration Month\",\n                    \"Value\": card_expiration_month\n                })\n\n            if card_expiration_year is not None:\n                item_custom_properties.append({\n                    \"Type\": \"Text\",\n                    \"Name\": \"Expiration Year\",\n                    \"Value\": card_expiration_year\n                })\n\n            if card_code is not None:\n                item_custom_properties.append({\n                    \"Type\": \"Protected\",\n                    \"Name\": \"Security Code\",\n                    \"Value\": card_code\n                })\n\n\n    if item_fields is not None:\n        for item_field in item_fields:\n            item_field_type = item_field[\"type\"]\n            item_field_name = item_field.get(\"name\", \"\")\n            item_field_value = item_field.get(\"value\", \"\")\n\n            custom_property_type = \"Text\"\n\n            if item_field_type == 1:\n                custom_property_type = \"Protected\"\n            elif item_field_type == 2:\n                custom_property_type = \"YesNo\"\n                item_field_value = bool(item_field_value)\n            \n            if item_field_name is None:\n                item_field_name = \"\"\n                \n            if item_field_value is None:\n                item_field_value = \"\"\n            \n            custom_property = {\n                \"Type\": custom_property_type,\n                \"Name\": item_field_name,\n                \"Value\": item_field_value\n            }\n\n            item_custom_properties.append(custom_property)\n\n\n    credential = {\n        \"Type\": \"Credential\",\n        \"ID\": item_id,\n        \"Name\": item_name,\n        \"Notes\": item_notes,\n        \"Favorite\": item_favorite,\n        \"Username\": item_username,\n        \"Password\": item_password,\n        \"URL\": item_url,\n        \"CustomProperties\": item_custom_properties\n    }\n    \n    return credential\n\n\ndef logout(bw_path):\n    cmd_logout = [ bw_path, \"logout\" ]\n    bw = subprocess.Popen(cmd_logout, stdout=subprocess.PIPE)\n    bw.wait()\n\n\ndef get_entries(bw_path, username, password):\n    printError = partial(print, file=sys.stderr) # python2 compatibility\n\n    logout(bw_path)\n\n    cmd_login = [ bw_path, \"login\", username, password, \"--raw\" ]\n    \n    bw = subprocess.Popen(cmd_login, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)\n\n    out_buffer = \"\"\n\n    send_two_step_code = False\n    multiple_two_step_methods = False\n\n    while True:\n        out = bw.stdout.read(1).decode(\"utf-8\")\n\n        out_buffer += out\n\n        if not send_two_step_code:\n            if out_buffer == '? Two-step login code:':\n                send_two_step_code = True\n\n                sys.stdout.flush()\n\n                mfa_code = show_prompt(\"Please enter your two-step login code:\")\n                bw.stdin.write((mfa_code + \"\\n\").encode(\"utf-8\"))\n\n                break\n            elif out_buffer == '? Two-step login method:':\n                multiple_two_step_methods = True\n\n                sys.stdout.flush()\n\n                break\n        \n        if out == \"\" and bw.poll() is not None:\n            break\n\n    if multiple_two_step_methods:\n        printError(\"Login failed. Multiple two-step login methods are enabled. This script only supports a single two-step login method.\")\n\n        sys.exit(1)\n\n    (session_key, err) = bw.communicate()\n\n    if send_two_step_code:\n        session_key = session_key.decode(\"utf-8\")\n    else:\n        session_key = out_buffer\n\n    out_buffer_split = session_key.split(\"\\n\")\n\n    if out_buffer_split is not None and len(out_buffer_split) >= 1:\n        out_buffer_split = list(filter(None, out_buffer_split))\n\n        last_line = out_buffer_split[len(out_buffer_split) - 1]\n\n        session_key = last_line\n\n    exit_code = bw.wait()\n\n    if exit_code != 0:\n        printError(\"Login failed, please verify your credentials.\")\n\n        sys.exit(1)\n\n    cmd_sync = [ bw_path, \"sync\", \"--session\", session_key ]\n\n    bw = subprocess.Popen(cmd_sync, stdout=subprocess.PIPE)\n    bw.wait()\n\n    cmd_list_items = [ bw_path, \"list\", \"items\", \"--session\", session_key ]\n\n    bw = subprocess.Popen(cmd_list_items, stdout=subprocess.PIPE)\n    (list_items_json, err) = bw.communicate()\n    exit_code = bw.wait()\n\n    if exit_code != 0:\n        printError(\"Listing items failed.\")\n\n        sys.exit(1)\n\n    list_items_response = json.loads(list_items_json)\n\n    store_objects = []\n\n    for item in list_items_response:\n        cred = create_credential(item)\n\n        store_objects.append(cred)\n\n    store = {\n        \"Objects\": store_objects\n    }\n    \n    store_json = json.dumps(store)\n    \n    return store_json\n\nbw_path = r\"$CustomProperty.PathToBWCLI$\"\nbw_path = os.path.expandvars(bw_path)\n\nprint(get_entries(bw_path, r\"$EffectiveUsername$\", r\"$EffectivePassword$\"))\nlogout(bw_path)"
    }
  ]
}
